---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: alertmanager
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: alertmanager
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # rule: egress-rule-alertmanager
    - to:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: alertmanager
    # rule: egress-rule-alert-receivers
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
  ingress:
    # rule: ingress-rule-alertmanager
    - from:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: alertmanager
    # rule: ingress-rule-alert-generators
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: falco
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: falcosidekick
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: thanos
          podSelector:
            matchLabels: 
              app.kubernetes.io/component: ruler
      ports:
        - protocol: TCP
          port: 9093
        - protocol: TCP
          port: 8080
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: all-deny
  namespace: monitoring
spec:
  podSelector: {}
  policyTypes:
    - Egress
    - Ingress
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: cert-manager-http01-solver
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      acme.cert-manager.io/http01-solver: "true"
  policyTypes:
    - Ingress
  ingress:
    # base: ingress-rule-ingress
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 8089
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: grafana
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: grafana
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
    # rule: egress-rule-prometheus
    - to:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
        - podSelector:
            matchLabels: 
              app: grafana-label-enforcer
      ports:
        - protocol: TCP
          port: 9090
    # rule: egress-rule-thanos
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: thanos
          podSelector:
            matchLabels: 
              app.kubernetes.io/component: query-frontend
      ports:
        - protocol: TCP
          port: 9090
    # rule: egress-rule-dex
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: dex
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: dex
      ports:
        - protocol: TCP
          port: 5556
    # rule: egress-rule-external-dashboards
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
  ingress:
    # base: ingress-rule-ingress
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 3000
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 3000
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: grafana-label-enforcer
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: grafana-label-enforcer
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # rule: egress-rule-thanos-query-frontend
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: thanos
          podSelector:
            matchLabels: 
              app.kubernetes.io/component: query-frontend
      ports:
        - protocol: TCP
          port: 9090
  ingress:
    # rule: ingress-rule-grafana-datasource
    - from:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: grafana
      ports:
        - protocol: TCP
          port: 9090
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: kube-state-metrics
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: kube-state-metrics
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
  ingress:
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 8080
        - protocol: TCP
          port: 8081
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: node-collector
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: node-collector
  policyTypes:
    - Egress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
    # base: egress-rule-nodes
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
    # rule: egress-rule-metrics-collection
    - to:
        - namespaceSelector: {}
  ingress:
    # base: ingress-rule-blackbox
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus-blackbox-exporter
      ports:
        - protocol: TCP
          port: 9090
    # rule: ingress-rule-metrics-collection
    - from:
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
        - podSelector:
            matchLabels: 
              app.kubernetes.io/name: grafana
      ports:
        - protocol: TCP
          port: 9090
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus-admission-create
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: kube-prometheus-stack-admission-create
  policyTypes:
    - Egress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus-admission-patch
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: kube-prometheus-stack-admission-patch
  policyTypes:
    - Egress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus-blackbox-exporter
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: prometheus-blackbox-exporter
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-nodes
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
    # base: egress-rule-ingress
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
    # base: egress-rule-wc-ingress
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
    # rule: egress-rule-probe
    - to:
        - namespaceSelector: {}
  ingress:
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9115
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus-node-exporter
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: prometheus-node-exporter
  policyTypes:
    - Ingress
  ingress:
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9010
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: prometheus-operator
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app: kube-prometheus-stack-operator
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
  ingress:
    # base: ingress-rule-apiserver
    - from:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 10250
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 10250
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: s3-exporter
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: s3-exporter
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-object-storage
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
  ingress:
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 9340
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: trivy-operator
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/instance: trivy-operator
      app.kubernetes.io/name: trivy-operator
  policyTypes:
    - Egress
    - Ingress
  egress:
    # base: egress-rule-apiserver
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 6443
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-trivy
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80
  ingress:
    # base: ingress-rule-prometheus
    - from:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: monitoring
          podSelector:
            matchLabels: 
              app.kubernetes.io/name: prometheus
      ports:
        - protocol: TCP
          port: 8080
---
# Source: networkpolicy-generator/templates/networkpolicy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  labels:
    helm.sh/chart: networkpolicy-generator-0.1.0
    app.kubernetes.io/name: networkpolicy-generator
    app.kubernetes.io/instance: networkpolicy
    app.kubernetes.io/version: "0.1.0"
    app.kubernetes.io/managed-by: Helm
  name: trivy-vulnerability-report-scanner
  namespace: monitoring
spec:
  podSelector:
    matchLabels:
      vulnerabilityReport.scanner: Trivy
  policyTypes:
    - Egress
  egress:
    # base: egress-rule-dns
    - to:
        - namespaceSelector:
            matchLabels: 
              kubernetes.io/metadata.name: kube-system
          podSelector:
            matchLabels: 
              k8s-app: kube-dns
        - ipBlock:
            cidr: 10.233.0.3/32
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    # base: egress-rule-trivy
    - to:
        - ipBlock:
            cidr: 0.0.0.0/0
      ports:
        - protocol: TCP
          port: 443
        - protocol: TCP
          port: 80

