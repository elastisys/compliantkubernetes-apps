---
# Source: podsecuritypolicies/templates/custom/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-core
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: core
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-database
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: database
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 999
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-jobservice
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: jobservice
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-registry
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: registry
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-trivy
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: trivy
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-core-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: core
  location: "spec.containers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-core-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: core
  location: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-core-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: core
  location: "spec.initContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-database-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: database
  location: "spec.containers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 999
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-database-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: database
  location: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 999
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-database-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: database
  location: "spec.initContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 999
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-jobservice-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: jobservice
  location: "spec.containers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-jobservice-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: jobservice
  location: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-jobservice-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: jobservice
  location: "spec.initContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-registry-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: registry
  location: "spec.containers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-registry-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: registry
  location: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-registry-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: registry
  location: "spec.initContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-trivy-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: trivy
  location: "spec.containers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-trivy-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: trivy
  location: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/custom/mutations/run-as-user.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-user-harbor-trivy-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaces:
      - harbor
    labelSelector:
      matchLabels:
        app: harbor
        component: trivy
  location: "spec.initContainers[name: *].securityContext.runAsUser"
  parameters:
    assign:
      value: 10000
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsUser"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/fsgroup.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: fsgroup-harbor-restricted
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
    labelSelector:
      matchExpressions:
        - key: app
          operator: NotIn
          values:
            - "harbor"
        - key: component
          operator: NotIn
          values:
            - "core"
        - key: app
          operator: NotIn
          values:
            - "harbor"
        - key: component
          operator: NotIn
          values:
            - "database"
        - key: app
          operator: NotIn
          values:
            - "harbor"
        - key: component
          operator: NotIn
          values:
            - "jobservice"
        - key: app
          operator: NotIn
          values:
            - "harbor"
        - key: component
          operator: NotIn
          values:
            - "registry"
        - key: app
          operator: NotIn
          values:
            - "harbor"
        - key: component
          operator: NotIn
          values:
            - "trivy"
  location: "spec.securityContext.fsGroup"
  parameters:
    assign:
      value: 1
    pathTests:
      - subPath: "spec.securityContext.fsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/host-ipc.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: host-ipc-harbor-restricted
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.hostIPC"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.hostIPC"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/host-pid.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: host-pid-harbor-restricted
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.hostPID"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.hostPID"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privilege-escalation.yaml
---
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privilege-escalation-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.containers[name: *].securityContext.allowPrivilegeEscalation"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.allowPrivilegeEscalation"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privilege-escalation.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privilege-escalation-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.allowPrivilegeEscalation"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.allowPrivilegeEscalation"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privilege-escalation.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privilege-escalation-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.allowPrivilegeEscalation"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.allowPrivilegeEscalation"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privileged.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.containers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.privileged"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privileged.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.privileged"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/privileged.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: privileged-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.privileged"
  parameters:
    assign:
      value: false
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.privileged"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-group.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-group-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.containers[name: *].securityContext.runAsGroup"
  parameters:
    assign:
      value: 1
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-group.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-group-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.runAsGroup"
  parameters:
    assign:
      value: 1
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-group.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-group-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.runAsGroup"
  parameters:
    assign:
      value: 1
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsGroup"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-non-root.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-non-root-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.containers[name: *].securityContext.runAsNonRoot"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.runAsNonRoot"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-non-root.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-non-root-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.runAsNonRoot"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.runAsNonRoot"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/run-as-non-root.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: run-as-non-root-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.runAsNonRoot"
  parameters:
    assign:
      value: true
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.runAsNonRoot"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/seccomp-profile.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: seccomp-profile-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.securityContext.seccompProfile.type"
  parameters:
    assign:
      value: RuntimeDefault
    pathTests:
      - subPath: "spec.securityContext.seccompProfile.type"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/seccomp-profile.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: seccomp-profile-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.seccompProfile.type"
  parameters:
    assign:
      value: RuntimeDefault
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.seccompProfile.type"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/seccomp-profile.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: Assign
metadata:
  name: seccomp-profile-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.seccompProfile.type"
  parameters:
    assign:
      value: RuntimeDefault
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.seccompProfile.type"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/privilege-escalation.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPAllowPrivilegeEscalationContainer
metadata:
  name: privilege-escalation-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
---
# Source: podsecuritypolicies/templates/default/users.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPAllowedUsers
metadata:
  name: users-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    runAsUser:
      rule: MustRunAsNonRoot
    runAsGroup:
      rule: RunAsAny
    supplementalGroups:
      rule: RunAsAny
    fsGroup:
      rule: RunAsAny
---
# Source: podsecuritypolicies/templates/default/capabilities.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPCapabilities
metadata:
  name: capabilities-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    requiredDropCapabilities:
      - ALL
---
# Source: podsecuritypolicies/templates/default/sysctls.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPForbiddenSysctls
metadata:
  name: sysctls-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    allowedSysctls: []
    forbiddenSysctls:
      - "*"
---
# Source: podsecuritypolicies/templates/default/host-paths.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPHostFilesystem
metadata:
  name: host-paths-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    allowedHostPaths: []
---
# Source: podsecuritypolicies/templates/default/host-namespace.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPHostNamespace
metadata:
  name: host-namespace-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
---
# Source: podsecuritypolicies/templates/default/host-network-ports.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPHostNetworkingPorts
metadata:
  name: host-network-ports-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    hostNetwork: false
    min: 0
    max: 0
---
# Source: podsecuritypolicies/templates/default/privileged.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPPrivilegedContainer
metadata:
  name: privileged-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
---
# Source: podsecuritypolicies/templates/default/volumes.yaml
apiVersion: constraints.gatekeeper.sh/v1beta1
kind: K8sPSPVolumeTypes
metadata:
  name: volumes-harbor-restricted
spec:
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  parameters:
    volumes:
      - configMap
      - downwardAPI
      - emptyDir
      - persistentVolumeClaim
      - projected
      - secret
---
# Source: podsecuritypolicies/templates/default/mutations/capabilities.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: ModifySet
metadata:
  name: capabilities-harbor-restricted-container
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.containers[name: *].securityContext.capabilities.drop"
  parameters:
    values:
      fromList:
        - ALL
    pathTests:
      - subPath: "spec.containers[name: *].securityContext.capabilities.drop"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/capabilities.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: ModifySet
metadata:
  name: capabilities-harbor-restricted-ephemeral
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.ephemeralContainers[name: *].securityContext.capabilities.drop"
  parameters:
    values:
      fromList:
        - ALL
    pathTests:
      - subPath: "spec.ephemeralContainers[name: *].securityContext.capabilities.drop"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/capabilities.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: ModifySet
metadata:
  name: capabilities-harbor-restricted-init
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.initContainers[name: *].securityContext.capabilities.drop"
  parameters:
    values:
      fromList:
        - ALL
    pathTests:
      - subPath: "spec.initContainers[name: *].securityContext.capabilities.drop"
        condition: MustNotExist
---
# Source: podsecuritypolicies/templates/default/mutations/supplemental-groups.yaml
apiVersion: mutations.gatekeeper.sh/v1
kind: ModifySet
metadata:
  name: supplemental-groups-harbor-restricted
spec:
  applyTo:
    - groups: [""]
      kinds: ["Pod"]
      versions: ["v1"]
  match:
    scope: Namespaced
    kinds:
      - apiGroups: [""]
        kinds: ["Pod"]
    namespaceSelector:
      matchExpressions:
        - key: kubernetes.io/metadata.name
          operator: In
          values:
            - harbor
  location: "spec.securityContext.supplementalGroups"
  parameters:
    values:
      fromList:
        - 1
    pathTests:
      - subPath: "spec.securityContext.supplementalGroups"
        condition: MustNotExist

