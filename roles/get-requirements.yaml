- name: Download compliantkubernetes-apps requirements
  connection: local
  hosts: localhost
  vars:
    install_path: "{{ lookup('env', 'CK8S_INSTALL_PATH', default='/usr/local/bin') }}"
    install_user: "{{ lookup('env','USER') }}"
    apache2_utils_version: "{{ requirements['apache2-utils'].version }}"
    curl_version: "{{ requirements['curl'].version }}"
    cdxgen_version: "{{ requirements['github.com/CycloneDX/cdxgen'].version | regex_replace('^v', '') }}"
    cyclonedx_cli_version: "{{ requirements['github.com/CycloneDX/cyclonedx-cli'].version | regex_replace('^v', '') }}"
    dnsutils_version: "{{ requirements['dnsutils'].version }}"
    helm_version: "{{ requirements['helm.sh/helm/v3'].version | regex_replace('^v', '') }}"
    helmdiff_version: "{{ requirements['github.com/databus23/helm-diff/v3'].version | regex_replace('^v', '') }}"
    helmfile_version: "{{ requirements['github.com/helmfile/helmfile'].version | regex_replace('^v', '') }}"
    helmsecrets_version: "{{ requirements['helm-secrets'].version | regex_replace('^v', '') }}"
    jq_version: "{{ requirements['jq'].version | regex_replace('^jq-', '') }}"
    kubectl_version: "{{ requirements['kubectl'].version | regex_replace('^v', '') }}"
    pwgen_version: "{{ requirements['pwgen'].version }}"
    s3cmd_version: "{{ requirements['s3cmd'].version }}"
    sops_version: "{{ requirements['getsops/sops/v3'].version | regex_replace('^v', '') }}"
    velero_version: "{{ requirements['github.com/vmware-tanzu/velero'].version }}"
    yajsv_version: "{{ requirements['github.com/neilpa/yajsv'].version | regex_replace('^v', '') }}"
    yq_version: "{{ requirements['github.com/mikefarah/yq/v4'].version | regex_replace('^v', '') }}"
    apt_list:
      - curl={{ curl_version }}
      - s3cmd={{ s3cmd_version }}
      - dnsutils={{ dnsutils_version }}
      - apache2-utils={{ apache2_utils_version }}
      - pwgen={{ pwgen_version }}
    get_url_list:
      - command: jq
        version: "{{ jq_version }}"
        url: https://github.com/stedolan/jq/releases/download/jq-{{ jq_version }}/jq-linux64
        dest: "{{ install_path }}/jq"
      - command: cdxgen
        version: "{{ cdxgen_version }}"
        url: https://github.com/CycloneDX/cdxgen/releases/download/v{{ cdxgen_version }}/cdxgen
        dest: "{{ install_path }}/cdxgen"
      - command: cyclonedx
        version: "{{ cyclonedx_cli_version }}"
        url: https://github.com/CycloneDX/cyclonedx-cli/releases/download/v{{ cyclonedx_cli_version }}/cyclonedx-linux-x64
        dest: "{{ install_path }}/cyclonedx"
      - command: sops
        version: "{{ sops_version }}"
        url: https://github.com/getsops/sops/releases/download/v{{ sops_version }}/sops-v{{ sops_version }}.linux.amd64
        dest: "{{ install_path }}/sops"
      - command: yq
        version: "{{ yq_version }}"
        url: https://github.com/mikefarah/yq/releases/download/v{{ yq_version }}/yq_linux_amd64
        dest: "{{ install_path }}/yq"
      - command: yq4
        version: "{{ yq_version }}"
        url: https://github.com/mikefarah/yq/releases/download/v{{ yq_version }}/yq_linux_amd64
        dest: "{{ install_path }}/yq4"
      - command: yajsv
        version: "{{ yajsv_version }}"
        url: https://github.com/neilpa/yajsv/releases/download/v{{ yajsv_version }}/yajsv.linux.amd64
        dest: "{{ install_path }}/yajsv"
        version_flag: "-v"

  tasks:
    - name: Parse requirement PURLs
      command: ../scripts/requirements/parse.py
      register: parse_requirements_result

    - name: Set requirements facts
      set_fact:
        requirements: "{{ parse_requirements_result.stdout | from_json }}"

    - name: Install apt-packages
      become: yes
      become_user: root
      apt:
        pkg: "{{ apt_list }}"
        update_cache: yes
        allow_downgrades: yes

    - name: Kubectl
      block:
        - name: Check if Kubectl exists
          stat:
            path: "{{ install_path }}/kubectl"
          register: kubectl_exists

        - name: Check Kubectl
          command: "kubectl version --client=true -ojson"
          register: current_kubectl_version
          when: kubectl_exists.stat.exists

        - name: Get Kubectl
          unarchive:
            src: https://dl.k8s.io/v{{ kubectl_version }}/kubernetes-client-linux-amd64.tar.gz
            dest: "{{ install_path }}"
            remote_src: yes
            extra_opts: [--strip-components=3]
          when: (not kubectl_exists.stat.exists) or
            (current_kubectl_version.stdout == "") or
            (kubectl_version | string not in current_kubectl_version.stdout | from_json | json_query('clientVersion.gitVersion'))

    - name: Velero
      block:
        - name: Check if Velero exists
          stat:
            path: "{{ install_path }}/velero"
          register: velero_exists

        - name: Check Velero
          command: "velero version --client-only | grep Version | awk '{print $2}'"
          register: current_velero_version
          when: velero_exists.stat.exists

        - name: Get Velero
          unarchive:
            src: https://github.com/vmware-tanzu/velero/releases/download/{{ velero_version }}/velero-{{ velero_version }}-linux-amd64.tar.gz
            dest: "{{ install_path }}"
            remote_src: yes
            extra_opts: [--strip-components=1]
          when: (not velero_exists.stat.exists) or
            (current_velero_version.stdout == "") or
            (velero_version | string not in current_velero_version.stdout)

    - name: Helm
      block:
        - name: Check if Helm exists
          stat:
            path: "{{ install_path }}/helm"
          register: helm_exists

        - name: Check Helm
          command: "helm version --short"
          register: current_helm_version
          when: helm_exists.stat.exists

        - name: Get Helm
          unarchive:
            src: https://get.helm.sh/helm-v{{ helm_version }}-linux-amd64.tar.gz
            dest: "{{ install_path }}"
            mode: 0775
            remote_src: yes
            extra_opts:
              - "--strip-components=1"
              - "--no-wildcards"
              - "--no-anchored"
              - "helm"
          when: (not helm_exists.stat.exists) or
            (current_helm_version.stdout == "") or
            (helm_version | string not in current_helm_version.stdout)

    - name: Helmfile
      block:
        - name: Check if Helmfile exists
          stat:
            path: "{{ install_path }}/helmfile"
          register: helmfile_exists

        - name: Check Helmfile
          command: "helmfile -v"
          register: current_helmfile_version
          when: helmfile_exists.stat.exists

        - name: Get Helm
          unarchive:
            src: https://github.com/helmfile/helmfile/releases/download/v{{ helmfile_version }}/helmfile_{{ helmfile_version }}_linux_amd64.tar.gz
            dest: "{{ install_path }}"
            mode: 0775
            remote_src: yes
            extra_opts:
              - "helmfile"
          when: (not helmfile_exists.stat.exists) or
            (current_helmfile_version.stdout == "") or
            (helmfile_version | string not in current_helmfile_version.stdout)

    - name: Helm-diff
      block:
        - name: Check if helm-diff plugin exists
          stat:
            path: "/home/{{ install_user }}/.local/share/helm/plugins/helm-diff"
          register: helm_diff_exists

        - name: Check Helm-diff
          become_user: "{{ install_user }}"
          shell: helm plugin list | grep diff
          register: current_helm_diff_version
          when: helm_diff_exists.stat.exists

        - name: Remove Helm-diff
          become_user: "{{ install_user }}"
          command: "helm plugin uninstall diff"
          register: "helm_diff_removed"
          when: (helm_diff_exists.stat.exists) and
            (helmdiff_version | string not in current_helm_diff_version.stdout)

        - name: Get Helm-diff
          become_user: "{{ install_user }}"
          command: "helm plugin install https://github.com/databus23/helm-diff --version v{{ helmdiff_version }}"
          register: "output"
          when: (not helm_diff_exists.stat.exists) or (helm_diff_removed.changed)

    - name: Helm-secrets
      block:
        - name: Check if helm-secrets plugin exists
          stat:
            path: "/home/{{ install_user }}/.local/share/helm/plugins/helm-secrets"
          register: helm_secrets_exists

        - name: Check Helm-secrets
          become_user: "{{ install_user }}"
          shell: helm plugin list | grep secrets
          register: current_helm_secrets_version
          when: helm_secrets_exists.stat.exists

        - name: Remove Helm-secrets
          become_user: "{{ install_user }}"
          command: "helm plugin uninstall secrets"
          register: "helm_secrets_removed"
          when: (helm_secrets_exists.stat.exists) and
            (helmsecrets_version | string not in current_helm_secrets_version.stdout)

        - name: Get Helm-secrets
          become_user: "{{ install_user }}"
          command: "helm plugin install https://github.com/jkroepke/helm-secrets --version v{{ helmsecrets_version }}"
          register: "output"
          when: not helm_secrets_exists.stat.exists or (helm_secrets_removed.changed)

    - name: Get URL
      include_tasks: get-url.yaml
      loop: "{{ get_url_list }}"
