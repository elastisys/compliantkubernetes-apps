{{- $main := .Values.objectStorage -}}

{{- $restore := $main.restore -}}
{{- $sync := $main.sync -}}

{{- $destinations := list -}}
{{- $sources := list -}}

dryrun: {{ $restore.dryrun }}

{{ $crypt := merge dict $restore.decrypt $sync.encrypt -}}
crypt: {{- include "crypt-provider" $crypt | nindent 2 }}

targets:
  {{- if $restore.addTargetsFromSync }}

  {{- if $sync.syncDefaultBuckets }}
  {{- range $key, $value := $main.buckets }}
  - destinationName: {{ $value }}
    {{- $destinationType := $main.type }}
    {{- $sourceType := $sync.destinationType }}

    {{- $componentConfig := $.Values | dig $key "objectStorage" "s3" dict }}
    {{- if $componentConfig }}
      {{- $destinationType = printf "%s-s3" $key }}
    {{- else if eq $key "harbor" }}
      {{- $destinationType = $.Values.harbor.persistence.type | replace "objectStorage" "" | default $destinationType }}
      {{- $sourceType = $.Values.harbor.persistence.type | replace "objectStorage" "" | default $sourceType }}
    {{- else if eq $key "thanos" }}
      {{- $destinationType = $.Values.thanos.objectStorage.type | default $destinationType }}
      {{- $sourceType = $.Values.thanos.objectStorage.type | default $sourceType }}
    {{- end }}

    {{- $destinations = append $destinations $destinationType }}
    destinationType: {{ $destinationType }}
    destinationPath: ""
    sourceName: {{ $value }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = append $sources $sourceType }}
    sourceType: {{ $sourceType }}
    sourcePath: ""
    nameSuffix: default
  {{- end }}
  {{- end }}

  {{- range $bucket := $sync.buckets }}
  - destinationName: {{ $bucket.source }}
    {{- $destinations = $bucket | get "sourceType" $main.type | append $destinations }}
    destinationType: {{ $bucket | get "sourceType" $main.type }}
    destinationPath: {{ $bucket | get "sourcePath" "" }}
    sourceName: {{ $bucket | get "destination" $bucket.source }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = $bucket | get "destinationType" $sync.destinationType | append $sources }}
    sourceType: {{ $bucket | get "destinationType" $sync.destinationType }}
    sourcePath: {{ $bucket | get "destinationPath" "" }}
    nameSuffix: {{ $bucket | get "nameSuffix" "custom" }}
  {{- end }}

  {{- end }}

  {{- range $bucket := $restore.targets }}
  - destinationName: {{ $bucket.destinationName }}
    {{- $destinations = $bucket | get "destinationType" $main.type | append $destinations }}
    destinationType: {{ $bucket | get "destinationType" $main.type }}
    destinationPath: {{ $bucket | get "destinationPath" "" }}
    sourceName: {{ $bucket | get "sourceName" $bucket.destinationName }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = $bucket | get "sourceType" $sync.destinationType | append $sources }}
    sourceType: {{ $bucket | get "sourceType" $sync.destinationType }}
    sourcePath: {{ $bucket | get "sourcePath" "" }}
    nameSuffix: {{ $bucket | get "nameSuffix" "custom" }}
  {{- end }}

providers:
  {{- if not $destinations }}
  {{ fail "rclone-restore configured without destinations" }}
  {{- end }}

  {{- $providers := merge dict $restore.destinations $main }}

  {{- range $destinations | uniq | sortAlpha }}
    {{- if hasSuffix "-s3" . }}
      {{- $component := . | replace "-s3" "" }}
      {{- $componentConfig := $.Values | dig $component "objectStorage" "s3" dict }}
      {{- if $componentConfig }}
        {{- $providerConfig := dict "type" "s3" "s3" $componentConfig }}
  {{ printf "destination-%s" . }}: {{- include "provider" $providerConfig | nindent 4 }}
      {{- else }}
        {{- $providerConfig := dict "type" "s3" "s3" $main.s3 }}
  {{ printf "destination-%s" . }}: {{- include "provider" $providerConfig | nindent 4 }}
      {{- end }}
    {{- else if ne . "s3" }}
  {{ printf "destination-%s" . }}: {{- set $providers "type" . | include "provider" | nindent 4 }}
    {{- else }}
      {{- $providerConfig := dict "type" "s3" "s3" $main.s3 }}
  destination-s3: {{- include "provider" $providerConfig | nindent 4 }}
    {{- end }}
  {{- end }}

  {{- if not $sources }}
  {{ fail "rclone-restore configured without sources" }}
  {{- end }}

  {{- $providers := merge dict $restore.sources $sync }}

  {{- range $sources | uniq | sortAlpha }}
  {{ printf "source-%s" . }}: {{- set $providers "type" . | include "provider" | nindent 4 }}
    {{- if eq "s3" . | and $restore.timestamp }}
    versionAt: {{ $restore.timestamp }}
    {{- end }}
  {{- end }}

{{- $global := dict
  "registry" (ternary (dig "uri" "" .Values.images.global.registry) "" .Values.images.global.registry.enabled)
  "repository" (ternary (dig "uri" "" .Values.images.global.repository) "" .Values.images.global.repository.enabled)
}}
{{- with .Values.images | dig "rclone" "image" "" }}
{{- with merge (include "container_uri.parse" . | fromJson) $global }}
image:
  {{- with include "gen.reg-rep-img" . }}
  repository: {{ . }}
  {{- end }}
  {{- if or .tag .digest }}
  tag: "{{ .tag }}{{ if .digest }}@{{ .digest }}{{ end }}"
  {{- end }}
{{- end }}
{{- end }}
