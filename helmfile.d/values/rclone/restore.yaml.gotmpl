{{- $main := .Values.objectStorage -}}

{{- $restore := $main.restore -}}
{{- $sync := $main.sync -}}

{{- $destinations := list -}}
{{- $sources := list -}}

dryrun: {{ $restore.dryrun }}

{{ $crypt := merge dict $restore.decrypt $sync.encrypt -}}
crypt: {{- include "crypt-provider" $crypt | nindent 2 }}

targets:
  {{- if $restore.addTargetsFromSync }}

  {{- if $sync.syncDefaultBuckets }}
  {{- range $key, $value := $main.buckets }}
  - destinationName: {{ $value }}
    {{- $destinationType := $main.type }}
    {{- $sourceType := $sync.destinationType }}

    {{- if eq $key "harbor" }}
    {{- $destinationType = $.Values.harbor.persistence.type | replace "objectStorage" "" | default $destinationType }}
    {{- $sourceType = $.Values.harbor.persistence.type | replace "objectStorage" "" | default $sourceType }}
    {{- else if eq $key "thanos" }}
    {{- $destinationType = $.Values.thanos.objectStorage.type | default $destinationType }}
    {{- $sourceType = $.Values.thanos.objectStorage.type | default $sourceType }}
    {{- end }}

    {{- $destinations = append $destinations $destinationType }}
    destinationType: {{ $destinationType }}
    destinationPath: ""
    sourceName: {{ $value }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = append $sources $sourceType }}
    sourceType: {{ $sourceType }}
    sourcePath: ""
    nameSuffix: default
  {{- end }}
  {{- end }}

  {{- range $sync.buckets }}
  - destinationName: {{ .source }}
    {{- $destinations = . | get "sourceType" $main.type | append $destinations }}
    destinationType: {{ . | get "sourceType" $main.type }}
    destinationPath: {{ . | get "sourcePath" "" }}
    sourceName: {{ . | get "destination" .source }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = . | get "destinationType" $sync.destinationType | append $sources }}
    sourceType: {{ . | get "destinationType" $sync.destinationType }}
    sourcePath: {{ . | get "destinationPath" "" }}
    nameSuffix: {{ . | get "nameSuffix" "custom" }}
  {{- end }}

  {{- end }}

  {{- range $restore.targets }}
  - destinationName: {{ .destinationName }}
    {{- $destinations = . | get "destinationType" $main.type | append $destinations }}
    destinationType: {{ . | get "destinationType" $main.type }}
    destinationPath: {{ . | get "destinationPath" "" }}
    sourceName: {{ . | get "sourceName" .destinationName }}
    sourceCrypt: {{ $crypt | get "enabled" false }}
    {{- $sources = . | get "sourceType" $sync.destinationType | append $sources }}
    sourceType: {{ . | get "sourceType" $sync.destinationType }}
    sourcePath: {{ . | get "sourcePath" "" }}
    nameSuffix: {{ . | get "nameSuffix" "custom" }}
  {{- end }}

providers:
  {{- if not $destinations }}
  {{ fail "rclone-restore configured without destinations" }}
  {{- end }}

  {{- $providers := merge dict $restore.destinations $main }}

  {{- range $destinations | uniq | sortAlpha }}
  {{ printf "destination-%s" . }}: {{- set $providers "type" . | include "provider" | nindent 4 }}
  {{- end }}

  {{- if not $sources }}
  {{ fail "rclone-restore configured without sources" }}
  {{- end }}

  {{- $providers := merge dict $restore.sources $sync }}

  {{- range $sources | uniq | sortAlpha }}
  {{ printf "source-%s" . }}: {{- set $providers "type" . | include "provider" | nindent 4 }}
    {{- if eq "s3" . | and $restore.timestamp }}
    versionAt: {{ $restore.timestamp }}
    {{- end }}
  {{- end }}

{{- $global := dict
  "registry" (ternary (dig "uri" "" .Values.images.global.registry) "" .Values.images.global.registry.enabled)
  "repository" (ternary (dig "uri" "" .Values.images.global.repository) "" .Values.images.global.repository.enabled)
}}
{{- with .Values.images | dig "rclone" "image" "" }}
{{- with merge (include "container_uri.parse" . | fromJson) $global }}
image:
  {{- with include "gen.reg-rep-img" . }}
  repository: {{ . }}
  {{- end }}
  {{- if or .tag .digest }}
  tag: "{{ .tag }}{{ if .digest }}@{{ .digest }}{{ end }}"
  {{- end }}
{{- end }}
{{- end }}
