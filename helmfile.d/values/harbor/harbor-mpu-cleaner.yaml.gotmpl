{{ if not (eq .Values.objectStorage.type "s3") }}
{{ fail "\nERROR: Harbor Multipartupload cleanup requires s3, see Values.objectStorage.type" }}
{{ end }}

maxAgeDays: {{ .Values.harbor.mpuCleaner.maxAgeDays }}
bucket: {{ .Values.objectStorage.buckets.harbor }}
schedule: {{ .Values.harbor.mpuCleaner.schedule | quote }}

s3:
  accessKey: {{ .Values.objectStorage.s3.accessKey }}
  secretKey: {{ .Values.objectStorage.s3.secretKey }}
  endpoint: {{ .Values.objectStorage.s3.regionEndpoint }}

{{- $global := dict
  "registry" (ternary (dig "uri" "" .Values.images.global.registry) "" .Values.images.global.registry.enabled)
  "repository" (ternary (dig "uri" "" .Values.images.global.repository) "" .Values.images.global.repository.enabled)
}}
{{- with .Values.images | dig "harbor" "mpuCleaner" "" }}
{{- with merge (include "container_uri.parse" . | fromJson) $global }}
image:
  {{- with include "gen.reg-rep-img" . }}
  repository: {{ . }}
  {{- end }}
  {{- if or .tag .digest }}
  tag: "{{ .tag }}{{ if .digest }}@{{ .digest }}{{ end }}"
  {{- end }}
{{- end }}
{{- end }}
