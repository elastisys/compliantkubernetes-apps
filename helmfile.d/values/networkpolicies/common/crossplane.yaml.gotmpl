{{- $functions := (list
  "auto-ready"
  "capability"
  "go-templating"
  "patch-and-transform"
) }}

policies:
  crossplane-system:
    all-deny:
      podSelectorLabels: {}
      egress: {}
      ingress: {}

    crossplane:
      podSelectorLabels:
        app.kubernetes.io/name: crossplane
        app: crossplane
      egress:
        - rule: egress-rule-apiserver
        - rule: egress-rule-dns
        {{- if and (.Values | get "networkPolicies.crossplane.packageRegistry.ips" list) (.Values | get "networkPolicies.crossplane.packageRegistry.ports" list) }}
        - name: egress-rule-package-registry
          peers:
            {{- range .Values | get "networkPolicies.crossplane.packageRegistry.ips" list }}
            - cidr: {{ . }}
            {{- end }}
          ports:
            {{- range .Values | get "networkPolicies.crossplane.packageRegistry.ports" list }}
            - tcp: {{ . }}
            {{- end }}
        {{- end }}
{{- range $function := $functions }}
        - name: egress-rule-{{ $function }}
          peers:
            - podSelectorLabels:
                pkg.crossplane.io/functions: {{ $function }}
{{- end }}

    crossplane-rbac-manager:
      podSelectorLabels:
        app.kubernetes.io/name: crossplane
        app: crossplane-rbac-manager
      egress:
        - rule: egress-rule-apiserver

    provider-waiter:
      podSelectorLabels:
        batch.kubernetes.io/job-name: crossplane-provider-waiter
      egress:
        - rule: egress-rule-apiserver

    provider-helm:
      podSelectorLabels:
        pkg.crossplane.io/provider: provider-kubernetes
      egress:
        - rule: egress-rule-apiserver

    provider-kubernetes:
      podSelectorLabels:
        pkg.crossplane.io/provider: provider-kubernetes
      egress:
        - rule: egress-rule-apiserver
