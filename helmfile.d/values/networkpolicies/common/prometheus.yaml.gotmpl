policies:
  monitoring:
    all-deny:
      podSelectorLabels: {}
      egress: {}
      ingress: {}

    {{- if eq .Environment.Name "service_cluster" }}
    cert-manager-http01-solver:
      podSelectorLabels:
        acme.cert-manager.io/http01-solver: "true"
      ingress:
        - rule: ingress-rule-ingress
          ports:
            - tcp: 8089
    {{- end }}

    prometheus:
      podSelectorLabels:
        app.kubernetes.io/name: prometheus
      egress:
        - rule: egress-rule-dns
        - rule: egress-rule-apiserver
        - rule: egress-rule-nodes
        {{- if eq .Environment.Name "workload_cluster" }}
        - rule: egress-rule-sc-ingress
        {{- end }}
        - name: egress-rule-metrics-collection
          peers:
            - namespaceSelectorLabels: {}
      ingress:
        {{- if eq .Environment.Name "workload_cluster" }}
        - rule: ingress-rule-apiserver
          ports:
            - tcp: 9090
        {{- if and .Values.networkPolicies.prometheus.internalAccess.enabled .Values.networkPolicies.prometheus.internalAccess.namespaces }}
        - name: ingress-rule-internal-prometheus
          peers:
            {{- range $namespace := .Values.networkPolicies.prometheus.internalAccess.namespaces }}
            - namespaceSelectorLabels:
                kubernetes.io/metadata.name: {{ $namespace }}
              podSelectorLabels:
                elastisys.io/prometheus-access: allow
            {{- end }}
          ports:
            - tcp: 9090
        {{- end }}
        {{- end }}
        - rule: ingress-rule-blackbox
          ports:
            - tcp: 9090
        - name: ingress-rule-metrics-collection
          peers:
            - podSelectorLabels:
                app.kubernetes.io/name: prometheus
            {{- if eq .Environment.Name "service_cluster" }}
            - podSelectorLabels:
                app.kubernetes.io/name: grafana
            {{- end }}
          ports:
            - tcp: 9090

    prometheus-admission-create:
      podSelectorLabels:
        app: kube-prometheus-stack-admission-create
      egress:
        - rule: egress-rule-apiserver
        {{- if .Values.networkPolicies.global.externalApiServer }}
        - rule: egress-rule-dns
        {{- end }}

    prometheus-admission-patch:
      podSelectorLabels:
        app: kube-prometheus-stack-admission-patch
      egress:
        - rule: egress-rule-apiserver
        {{- if .Values.networkPolicies.global.externalApiServer }}
        - rule: egress-rule-dns
        {{- end }}

    prometheus-operator:
      podSelectorLabels:
        app: kube-prometheus-stack-operator
      egress:
        - rule: egress-rule-apiserver
        {{- if .Values.networkPolicies.global.externalApiServer }}
        - rule: egress-rule-dns
        {{- end }}
      ingress:
        - rule: ingress-rule-apiserver
          ports:
            - tcp: 10250
        - rule: ingress-rule-prometheus
          ports:
            - tcp: 10250
        {{- if .Values.networkPolicies.global.externalApiServer }}
        - rule: ingress-rule-gardener-vpn
        {{- end }}

    prometheus-blackbox-exporter:
      podSelectorLabels:
        app.kubernetes.io/instance: prometheus-blackbox-exporter
      egress:
        - rule: egress-rule-dns
        - rule: egress-rule-nodes
        - rule: egress-rule-ingress
        {{- if eq .Environment.Name "service_cluster" }}
        - rule: egress-rule-wc-ingress
        {{- else if eq .Environment.Name "workload_cluster" }}
        - rule: egress-rule-sc-ingress
        {{- end }}
        - name: egress-rule-probe
          peers:
            - namespaceSelectorLabels: {}
      ingress:
        - rule: ingress-rule-prometheus
          ports:
            - tcp: 9115

    prometheus-node-exporter:
      podSelectorLabels:
        app.kubernetes.io/name: prometheus-node-exporter
      ingress:
        - rule: ingress-rule-prometheus
          ports:
            - tcp: 9010

    kube-state-metrics:
      podSelectorLabels:
        app.kubernetes.io/name: kube-state-metrics
      egress:
        - rule: egress-rule-apiserver
        {{- if .Values.networkPolicies.global.externalApiServer }}
        - rule: egress-rule-dns
        {{- end }}
      ingress:
        - rule: ingress-rule-prometheus
          ports:
            - tcp: 8080

    {{- if eq .Environment.Name "service_cluster" }}
    {{- if eq .Values.objectStorage.type "s3" | and .Values.s3Exporter.enabled .Values.networkPolicies.s3Exporter.enabled }}
    s3-exporter:
      podSelectorLabels:
        app.kubernetes.io/name: s3-exporter
      egress:
        - rule: egress-rule-dns
        - rule: egress-rule-object-storage
      ingress:
        - rule: ingress-rule-prometheus
          ports:
            - tcp: 9340
    {{- end }}
    {{- end }}
