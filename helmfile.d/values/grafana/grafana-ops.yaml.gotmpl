# admin username is "admin"
serviceMonitor:
  enabled: true
service:
  ipFamilyPolicy: {{ .Values.global.ipFamilyPolicy }}
  ipFamilies: {{ toYaml .Values.global.ipFamilies | nindent 4 }}
ingress:
  annotations:
    ingress.kubernetes.io/rewrite-target: /
  {{ if and .Values.externalTrafficPolicy.local .Values.externalTrafficPolicy.whitelistRange.opsGrafana }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.externalTrafficPolicy.whitelistRange.opsGrafana }}
  {{ end }}
  hosts:
  - {{ .Values.grafana.ops.subdomain }}.{{ .Values.global.opsDomain }}
  tls:
  - secretName: ops-grafana-tls
    hosts:
    - {{ .Values.grafana.ops.subdomain }}.{{ .Values.global.opsDomain }}

sidecar:
  dashboards:
    labelValue: "" # should be set to "" to load all dashboards, regardless of the label value
  resources: {{- toYaml .Values.grafana.ops.sidecar.resources | nindent 6 }}

admin:
  existingSecret: {{ .Release.Name }}-env ## Should match the secret name for envRenderSecret

envRenderSecret:
  admin-user: admin
  admin-password: {{ .Values.grafana.password }}
  {{- if .Values.grafana.ops.oidc.enabled }}
  opsClientSecret: {{ .Values.grafana.opsClientSecret }}
  {{- end }}
  {{- if .Values.grafana.ops.envRenderSecret }}
  {{- toYaml .Values.grafana.ops.envRenderSecret | nindent 2 }}
  {{- end }}


{{- if .Values.grafana.ops.plugins }}
plugins: {{- toYaml .Values.grafana.ops.plugins | nindent 2 }}
{{- end }}

datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    {{- if .Values.grafana.ops.additionalDatasources }}
    {{- toYaml .Values.grafana.ops.additionalDatasources | nindent 4 }}
    {{- end }}
    - name: prometheus-sc
      access: proxy
      basicAuth: false
      editable: false
      isDefault: false
      orgId: 1
      type: prometheus
      url: http://kube-prometheus-stack-prometheus:9090
      version: 1
      jsonData:
        prometheusType: Prometheus
        timeInterval: "30s" # this value should be equal with .prometheus.prometheusSpec.scrapeInterval
    {{- if and .Values.thanos.enabled .Values.thanos.query.enabled }}
    - name: "Thanos All"
      access: proxy
      basicAuth: false
      editable: false
      isDefault: true
      orgId: 1
      type: prometheus
      url: http://thanos-query-query-frontend.thanos:9090
      jsonData:
        prometheusType: Thanos
        timeInterval: "30s" # this value should be equal with .prometheus.prometheusSpec.scrapeInterval
      version: 1
    - name: "Thanos SC Only"
      access: proxy
      basicAuth: false
      editable: false
      isDefault: false
      orgId: 1
      type: prometheus
      url: http://grafana-label-enforcer:9090
      jsonData:
        customQueryParameters: "tenant_id={{ .Values.global.clusterName }}"
        manageAlerts: false
      version: 1
    {{- range .Values.global.clustersMonitoring }}
    - name: "Thanos {{ . }} only"
      access: proxy
      basicAuth: false
      editable: false
      isDefault: false
      orgId: 1
      type: prometheus
      url: http://grafana-label-enforcer:9090
      version: 1
      jsonData:
        customQueryParameters: "tenant_id={{ . }}"
        manageAlerts: false
    {{- end }}
    {{- end }}

{{ $trailingDot := "" }}
{{- if .Values.grafana.ops.trailingDots }}
{{ $trailingDot = "." }}
{{- end }}

grafana.ini:
  server:
    root_url: https://{{ .Values.grafana.ops.subdomain }}.{{ .Values.global.opsDomain }}
  {{ if .Values.grafana.ops.oidc.enabled -}}
  # Enable user lookup based on email in addition to using unique ID provided by IdPs.
  auth:
    oauth_allow_insecure_email_lookup: true
  auth.generic_oauth:
    name: dex
    enabled: {{ .Values.grafana.ops.oidc.enabled }}
    use_pkce: true
    client_id: grafana-ops
    client_secret: $__env{opsClientSecret}
    scopes: {{ .Values.grafana.ops.oidc.scopes }}
    auth_url: https://{{ .Values.dex.subdomain }}.{{ .Values.global.baseDomain }}{{ $trailingDot }}/auth
    token_url: http://dex.dex.svc.cluster.local{{ $trailingDot }}:5556/token
    api_url: http://dex.dex.svc.cluster.local{{ $trailingDot }}:5556/api
    allowed_domains: {{ join " " .Values.grafana.ops.oidc.allowedDomains }}
    allow_sign_up: true
    skip_org_role_sync: {{ .Values.grafana.ops.oidc.skipRoleSync }}
    tls_skip_verify_insecure: {{ not .Values.global.verifyTls }}
    role_attribute_path: contains(groups[*], '{{ .Values.grafana.ops.oidc.userGroups.grafanaAdmin }}') && 'Admin' || contains(groups[*], '{{ .Values.grafana.ops.oidc.userGroups.grafanaEditor }}') && 'Editor' || contains(groups[*], '{{ .Values.grafana.ops.oidc.userGroups.grafanaViewer }}') && 'Viewer'
    {{- end }}
  users:
    viewers_can_edit: {{ .Values.grafana.ops.viewersCanEdit }}
  dataproxy:
    timeout: {{ .Values.grafana.ops.dataproxy.timeout }}
  {{- with .Values.grafana.ops.contentSecurityPolicy }}
  security:
    content_security_policy: true
    {{- $grafanaCSP := list }}
    {{- range $cspKey, $cspValue := . }}
    {{- $grafanaCSP = append $grafanaCSP (printf "%s %s" $cspKey $cspValue)  }}
    {{- end }}
    content_security_policy_template: |-
      """{{ $grafanaCSP | join ";" }}"""
  {{- end }}
  {{- if .Values.grafana.ops.additionalConfigValues }}
  {{ .Values.grafana.ops.additionalConfigValues | nindent 2 }}
  {{- end }}

resources: {{- toYaml .Values.grafana.ops.resources | nindent 4 }}
tolerations: {{- toYaml .Values.grafana.ops.tolerations | nindent 4 }}
affinity: {{- toYaml .Values.grafana.ops.affinity | nindent 4 }}
nodeSelector: {{- toYaml .Values.grafana.ops.nodeSelector | nindent 4 }}
