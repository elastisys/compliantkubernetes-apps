opensearchHosts: https://{{ .Values.opensearch.clusterName }}-master:9200

service:
  ipFamilyPolicy: {{ .Values.global.ipFamilyPolicy }}
  # TODO: Make sure upstream support this instead
  # ipFamilies: toYaml .Values.global.ipFamilies | nindent 4

config:
  opensearch_dashboards.yml:
    server:
      host: "0"

    {{- with .Values.opensearch.dashboards.contentSecurityPolicy }}
    csp:
      strict: true

      rules: {{ toYaml . | nindent 8}}
    {{- end }}

    opensearchDashboards:
      configIndex: ".opensearch_dashboards_config"

    opensearch:
      ssl:
        verificationMode: none
      requestHeadersWhitelist:
        - Authorization
        - securitytenant

    opensearch_security:
      {{ if .Values.opensearch.sso.enabled }}
      auth:
        type: "openid"
      openid:
        scope: {{ .Values.opensearch.sso.scope }}
        connect_url: http://dex.dex.svc.cluster.local:5556/.well-known/openid-configuration
        client_id: "opensearch"
        client_secret: {{ .Values.opensearch.clientSecret }}
        base_redirect_url: https://{{ .Values.opensearch.dashboards.subdomain }}.{{ .Values.global.baseDomain }}
        logout_url: https://{{ .Values.opensearch.dashboards.subdomain }}.{{ .Values.global.baseDomain }}
      {{ end }}
      multitenancy:
        enabled: false
      readonly_mode:
        roles:
          - kibana_read_only
      # Use this setting if you are running opensearch-dashboards without https
      cookie:
        secure: false
        {{- if hasKey .Values.opensearch.dashboards "cookieTtl" }}
        ttl: {{ .Values.opensearch.dashboards.cookieTtl }}
        {{- end }}
      {{- if or (hasKey .Values.opensearch.dashboards "sessionTtl") (hasKey .Values.opensearch.dashboards "sessionKeepalive") }}
      session:
        {{- if hasKey .Values.opensearch.dashboards "sessionTtl" }}
        ttl: {{ .Values.opensearch.dashboards.sessionTtl }}
        {{- end }}
        {{- if hasKey .Values.opensearch.dashboards "sessionKeepalive" }}
        keepalive: {{ .Values.opensearch.dashboards.sessionKeepalive }}
        {{- end }}
      {{- end }}

opensearchAccount:
  secret: opensearch-dashboards-user

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    cert-manager.io/cluster-issuer: {{ .Values.global.issuer }}
    nginx.ingress.kubernetes.io/proxy-body-size: {{ .Values.opensearch.ingress.maxbodysize }}
    {{ if and .Values.externalTrafficPolicy.local .Values.externalTrafficPolicy.whitelistRange.opensearchDashboards }}
    nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.externalTrafficPolicy.whitelistRange.opensearchDashboards }}
    {{ end }}
  # Due to template structure, variables need to be set to empty or "" to satisfy skeleton requirements
  hosts:
    - host: {{ .Values.opensearch.dashboards.subdomain }}.{{ .Values.global.baseDomain }}
      paths:
        - path: /
          backend:
            serviceName: ""
            servicePort: ""
  tls:
    - secretName: opensearch-dashboards-ingress-cert
      hosts:
        - {{ .Values.opensearch.dashboards.subdomain }}.{{ .Values.global.baseDomain }}

resources: {{- toYaml .Values.opensearch.dashboards.resources | nindent 2 }}

nodeSelector: {{- toYaml .Values.opensearch.dashboards.nodeSelector | nindent 4 }}

tolerations: {{- toYaml .Values.opensearch.dashboards.tolerations | nindent 4 }}

affinity: {{- toYaml .Values.opensearch.dashboards.affinity | nindent 4 }}

{{- $global := dict
  "registry" (ternary (dig "uri" "" .Values.images.global.registry) "" .Values.images.global.registry.enabled)
  "repository" (ternary (dig "uri" "" .Values.images.global.repository) "" .Values.images.global.repository.enabled)
}}
{{- with .Values.images | dig "opensearch" "dashboards" "" }}
{{- with merge (include "container_uri.parse" . | fromJson) $global }}
image:
  {{- with include "gen.reg-rep-img" . }}
  repository: {{ . }}
  {{- end }}
  {{- if or .tag .digest }}
  tag: "{{ .tag }}{{ if .digest }}@{{ .digest }}{{ end }}"
  {{- end }}
{{- end }}
{{- end }}
