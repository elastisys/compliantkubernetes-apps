{{ if and .Values.opensearch.dataNode.dedicatedPods (eq .Values.opensearch.dataNode.count 0) }}
{{ fail "\nERROR: Using 0 replicas with dedicated data pods is not supported by OpenSearch" }}
{{ end }}
{{ if and .Values.opensearch.clientNode.dedicatedPods (eq .Values.opensearch.clientNode.count 0) }}
{{ fail "\nERROR: Using 0 replicas with dedicated client pods is not supported by OpenSearch" }}
{{ end }}

{{- $global := dict
  "registry" (ternary (dig "uri" "" .Values.images.global.registry) "" .Values.images.global.registry.enabled)
  "repository" (ternary (dig "uri" "" .Values.images.global.repository) "" .Values.images.global.repository.enabled)
}}

clusterName: {{ .Values.opensearch.clusterName }}

masterService: {{ .Values.opensearch.clusterName }}-master

service:
  ipFamilyPolicy: {{ .Values.global.ipFamilyPolicy }}
  # TODO: Make sure upstream support this instead
  # ipFamilies: toYaml .Values.global.ipFamilies | nindent 4

config:
  opensearch.yml: |
    cluster:
      name: {{ .Values.opensearch.clusterName }}
      max_shards_per_node: {{ .Values.opensearch.maxShardsPerNode }}

    network:
      host: 0.0.0.0

    indices:
      query:
        bool:
          max_clause_count: {{ .Values.opensearch.maxClauseCount }}

    compatibility:
      override_main_response_version: true

    {{- if .Values.opensearch.indexPerNamespace }}
    action:
      auto_create_index: "-kubeaudit,-authlog,-other,+*"
    {{- else }}
    action:
      auto_create_index: ".opensearch*,.opendistro-*,security-auditlog-*"
    {{- end }}

    node:
      attr:
        box_type: hot

    # Security plugin configuration
    plugins:
      security:
        ssl:
          transport:
            pemcert_filepath: transport/tls.crt
            pemkey_filepath: transport/tls.key
            pemtrustedcas_filepath: transport/ca.crt
            enforce_hostname_verification: false
          http:
            enabled: true
            pemcert_filepath: http/tls.crt
            pemkey_filepath: http/tls.key
            pemtrustedcas_filepath: http/ca.crt
        allow_unsafe_democertificates: false
        allow_default_init_securityindex: false
        authcz:
          admin_dn:
            - "CN=admin.opensearch-system.cluster.local,O=compliantkubernetes"
        audit:
          type: log4j
          config:
            log4j:
              logger_name: audit
              level: INFO
          # In example config, but not supported
          # ignore_users:
          #   - kibanaserver
        enable_snapshot_restore_privilege: true
        check_snapshot_restore_write_privileges: true
        nodes_dn:
          - "CN=nodes.opensearch-system.cluster.local,O=compliantkubernetes"
        restapi:
          roles_enabled:
            - all_access
            - configurer
            - security_rest_api_access
        system_indices:
          enabled: true
          indices:
            [
              ".opendistro-alerting-config",
              ".opendistro-alerting-alert*",
              ".opendistro-anomaly-results*",
              ".opendistro-anomaly-detector*",
              ".opendistro-anomaly-checkpoints",
              ".opendistro-anomaly-detection-state",
              ".opendistro-reports-*",
              ".opendistro-notifications-*",
              ".opendistro-notebooks",
              ".opendistro-asynchronous-search-response*",
            ]

    {{ if .Values.opensearch.snapshot.enabled -}}
    # Object storage configuration
    {{ if eq .Values.objectStorage.type "s3" -}}
    s3:
      client:
        default:
          endpoint: {{ include "componentObjectStorage" (list "opensearch" "regionEndpoint" .) }}
          path_style_access: {{ include "componentObjectStorage" (list "opensearch" "forcePathStyle" .) }}
          region: {{ include "componentObjectStorage" (list "opensearch" "region" .) }}
    {{ else if eq .Values.objectStorage.type "gcs" -}}
    # TODO: Add config for GCS if any.
    {{ else if eq .Values.objectStorage.type "azure" -}}
    azure:
      client:
        default:
          account: {{ .Values.objectStorage.azure.storageAccountName }}
    {{- end }}
    {{- end }}

# To prevent the demo certs from generating: https://github.com/opensearch-project/helm-charts/issues/154
extraEnvs:
  - name: DISABLE_INSTALL_DEMO_CONFIG
    value: "true"

secretMounts:
  - secretName: opensearch-transport-cert
    name: opensearch-transport-cert
    path: /usr/share/opensearch/config/transport
    defaultMode: 0400
  - secretName: opensearch-http-cert
    name: opensearch-http-cert
    path: /usr/share/opensearch/config/http
    defaultMode: 0400

rbac:
  create: true

persistence:
  enableInitChown: false

podSecurityContext:
  fsGroup: 1000

securityContext:
  runAsNonRoot: true
  runAsGroup: 1000
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

networkPolicy:
  create: true

{{- if .Values.opensearch.snapshot.enabled }}
keystore:
  {{- if (eq .Values.objectStorage.type "s3") }}
  - secretName: opensearch-s3-secret
  {{- else if (eq .Values.objectStorage.type "gcs") }}
  - secretName: opensearch-gcs-secret
  {{- else if (eq .Values.objectStorage.type "azure") }}
  - secretName: opensearch-azure-secret
  {{- end }}
plugins:
  enabled: true
  installList:
    {{- if .Values.opensearch.plugins.installExternalObjectStoragePlugin }}
    {{- if (eq .Values.objectStorage.type "s3") }}
    - repository-s3
    {{- else if (eq .Values.objectStorage.type "gcs") }}
    - repository-gcs
    {{- else if (eq .Values.objectStorage.type "azure") }}
    - repository-azure
    {{- end }}
    {{- end }}
    {{- with .Values.opensearch.plugins.additionalPlugins }}
    {{- toYaml . | nindent 4 }}
    {{- end }}
{{- end}}

{{- with .Values.images | dig "opensearch" "image" "" }}
{{- with merge (include "container_uri.parse" . | fromJson) $global }}
majorVersion: 2

global:
  dockerRegistry: ""

image:
  {{- with include "gen.reg-rep-img" . }}
  repository: {{ . }}
  {{- end }}
  {{- if or .tag .digest }}
  tag: "{{ .tag }}{{ if .digest }}@{{ .digest }}{{ end }}"
  {{- end }}
{{- end }}
{{- end }}
