apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: wait-for-crds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
rules:
  - apiGroups: [pkg.crossplane.io]
    resources: [providers, functions, configurations]
    verbs: [get, list, watch]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: wait-for-crds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
subjects:
  - kind: ServiceAccount
    name: wait-for-crds
    namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: wait-for-crds
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: wait-for-crds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
---
apiVersion: batch/v1
kind: Job
metadata:
  name: wait-for-crds
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: hook-succeeded,before-hook-creation
spec:
  template:
    metadata:
      name: wait-for-crds
    spec:
      serviceAccountName: wait-for-crds
      restartPolicy: Never
      containers:
      - name: wait-for-crds
        image: registry.k8s.io/kubectl:v1.30.9
        command: [
          kubectl, wait, --timeout, 120s, --for, condition=Healthy=true,
            providers.pkg.crossplane.io/provider-helm,
            providers.pkg.crossplane.io/provider-kubernetes,
            functions.pkg.crossplane.io/function-patch-and-transform,
            functions.pkg.crossplane.io/function-environment-configs,
            configurations.pkg.crossplane.io/metrics-server,
            configurations.pkg.crossplane.io/opensearch,
            configurations.pkg.crossplane.io/fluentd-forwarder
        ]
