$schema: https://json-schema.org/draft/2020-12/schema
$id: https://github.com/elastisys/compliantkubernetes-apps/raw/main/config/schemas/secrets.yaml
$comment: |-
  This describes the general structure of the secrets file. Since most are
  simply opaque strings, it's tricky to validate beyond their length.

  The few strings that have some format, e.g. URIs and email addresses, can
  only be validated after decryption, so these are checked against two schemas,
  one for sops-encrypted strings and the other for the decrypted format.
$defs:
  encrypted:
    $comment: Combine this and the decrypted format using oneOf or anyOf
    pattern: ^ENC\[
    title: String encrypted using sops.
    type: string
  password:
    oneOf:
      - minLength: 8
        type: string
      - $ref: '#/$defs/encrypted'
    title: Password
  token:
    anyOf:
      - minLength: 20
        type: string
      - $ref: '#/$defs/encrypted'
    title: Opaque Token
properties:
  objectStorage:
    properties:
      gcs:
        properties:
          keyfileData:
            type: string
        type: object
      s3:
        properties:
          accessKey:
            type: string
          secretKey:
            type: string
        type: object
      swift:
        properties:
          applicationCredentialID:
            type: string
          applicationCredentialSecret:
            description: Configure application credential to use with Thanos and or rclone-sync
            type: string
          password:
            type: string
          username:
            type: string
        type: object
      sync:
        description: If backup sync is enabled
        properties:
          encrypt:
            properties:
              password:
                description: generate with `pwgen 32 1`
                type: string
              passwordObscured:
                description: generate with `rclone obscure <password>`
                type: string
              salt:
                description: generate with `pwgen 32 1`
                type: string
              saltObscured:
                description: generate with `rclone obscure <salt>`
                type: string
            type: object
          s3:
            properties:
              accessKey:
                type: string
              secretKey:
                type: string
            type: object
          swift:
            type: object
            description: application credentials are preferred over username and password, but both are currently supported
            oneOf:
              - properties:
                  applicationCredentialID:
                    type: string
                  applicationCredentialSecret:
                    type: string
              - properties:
                  password:
                    type: string
                  username:
                    type: string
        type: object
    type: object
  grafana:
    properties:
      clientSecret:
        type: string
      ops:
        properties:
          envRenderSecret:
            items:
              $comment: TODO
            type: array
        type: object
      opsClientSecret:
        type: string
      password:
        type: string
      user:
        properties:
          envRenderSecret:
            items:
              $comment: TODO same as ops above? env key-value pairs? map even?
            type: array
        type: object
    type: object
  harbor:
    properties:
      clientSecret:
        type: string
      coreSecret:
        type: string
      external:
        properties:
          databasePassword:
            description: password for external database user
            type: string
        type: object
      internal:
        properties:
          databasePassword:
            type: string
        type: object
      jobserviceSecret:
        type: string
      password:
        type: string
      registrySecret:
        type: string
      xsrf:
        type: string
    type: object
  thanos:
    properties:
      receiver:
        properties:
          basic_auth:
            properties:
              password:
                description: password for external database user
                type: string
            type: object
        type: object
    type: object
  user:
    type: object
    properties:
      grafanaPassword:
        type: string
      alertmanagerPassword:
        type: string
  opensearch:
    properties:
      adminHash:
        type: string
      adminPassword:
        type: string
      clientSecret:
        type: string
      configurerHash:
        type: string
      configurerPassword:
        type: string
      curatorPassword:
        type: string
      dashboardsCookieEncKey:
        type: string
      dashboardsHash:
        type: string
      dashboardsPassword:
        type: string
      extraUsers:
        items:
          properties:
            definition:
              properties:
                attributes:
                  properties:
                    attribute1:
                      type: string
                    attribute2:
                      type: string
                  type: object
                backend_role:
                  items:
                    type: string
                  type: array
                opendistro_security_roles:
                  items:
                    description: make sure the role exists or is created using extraRoles
                    examples:
                      - kibana_user
                    type: string
                  type: array
                password:
                  type: string
              type: object
            username:
              type: string
          type: object
        type: array
      fluentdPassword:
        type: string
      metricsExporterPassword:
        type: string
      snapshotterPassword:
        type: string
    type: object
  kubeapiMetricsPassword:
    type: string
  alerts:
    properties:
      opsGenie:
        properties:
          apiKey:
            $ref: '#/$defs/token'
        type: object
      slack:
        properties:
          apiUrl:
            oneOf:
              - format: uri
              - $ref: '#/$defs/encrypted'
            title: Slack API URL
            type: string
        type: object
    type: object
  kured:
    properties:
      slack:
        properties:
          botToken:
            type: string
        type: object
    type: object
  dex:
    properties:
      additionalStaticClients:
        items:
          properties:
            id:
              type: string
            name:
              type: string
            redirectURIs:
              items:
                examples:
                  - http://192.168.42.219:31850/oauth2/callback
                oneOf:
                  - format: uri
                  - $ref: '#/$defs/encrypted'
                title: OAuth callback URI
                type: string
              type: array
            secret:
              type: string
          type: object
        type: array
      connectors:
        description: <https://dexidp.io/docs/connectors/oidc/>
        items:
          properties:
            config:
              $comment: |-
                fields depends on `type` of parent? better modelled as oneOf?
                TODO ldap has divergent fields from the oauth variants
              properties:
                adminEmail:
                  oneOf:
                    - format: email
                    - $ref: '#/$defs/encrypted'
                  type: string
                clientID:
                  type: string
                clientSecret:
                  type: string
                hostedDomains:
                  items:
                    oneOf:
                      - format: hostname
                      - $ref: '#/$defs/encrypted'
                    type: string
                  type: array
                issuer:
                  oneOf:
                    - format: uri
                    - $ref: '#/$defs/encrypted'
                  type: string
                redirectURI:
                  examples:
                    - https://dex.${BASE_DOMAIN}/callback
                  oneOf:
                    - format: uri
                    - $ref: '#/$defs/encrypted'
                  title: OAuth callback URI
                  type: string
                serviceAccountFilePath:
                  examples:
                    - /etc/dex/google/sa.json
                  type: string
              type: object
            id:
              examples:
                - google
              type: string
            name:
              examples:
                - Google
              type: string
            type:
              oneOf:
                - enum:
                    - atlassiancrowd
                    - authproxy
                    - bitbucketcloud
                    - gitea
                    - github
                    - gitlab
                    - google
                    - keystone
                    - ldap
                    - linkedin
                    - microsoft
                    - mock
                    - oauth
                    - oidc
                    - openshift
                    - saml
                - $ref: '#/$defs/encrypted'
              title: Dex connector
              type: string
          required:
            - type
            - name
          type: object
        type: array
      kubeloginClientSecret:
        type: string
      staticPassword:
        format: crypt
        type: string
    type: object
  issuers:
    properties:
      secrets:
        $comment: is this just passed through as-is?
        properties:
          route53-credentials-secret:
            properties:
              secretKey:
                type: string
            required:
              - secretKey
            type: object
        type: object
    type: object
type: object
