# This configuration applies to the workload cluster.
# It will override settings set in "defaults/common-config.yaml".
global:
  ## The cluster name.
  ## Used in logs and metrics as to separate these from other clusters.
  clusterName: ${CK8S_ENVIRONMENT_NAME}-wc

## User configuration.
user:
  ## This only controls if the namespaces should be created, user RBAC is always created.
  createNamespaces: true

  ## List of user namespaces to create.
  namespaces:
    - set-me
    - demo

  ## List of users to create RBAC rules for.
  adminUsers:
    - set-me
    - admin@example.com

  ## List of groups to create RBAC rules for.
  adminGroups:
    - set-me

  ## User controlled alertmanager configuration.
  alertmanager:
    enabled: true
    resources:
      requests:
        cpu: 10m
        memory: 50Mi
      limits:
        cpu: 50m
        memory: 100Mi

## Prometheus configuration.
## Prometheus collects metrics and pushes it to InfluxDB.
prometheus:
  remoteWrite:
    ## User used when authentication against InfluxDB.
    user: wcWriter

  ## Additional prometheus scrape config.
  ## ref: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config
  additionalScrapeConfigs: []

## Open policy agent configuration
opa:
  enabled: true

  controllerManager:
    resources:
      requests:
        cpu: 50m
        memory: 80Mi
      limits:
        cpu: 200m
        memory: 100Mi

  audit:
    resources:
      requests:
        cpu: 200m
        memory: 100Mi
      limits:
        cpu: 500m
        memory: 200Mi

  # how often gatekeeper audits kubernetes resources, in seconds
  auditIntervalSeconds: 600

  ## Enable rule that requires pods to come from
  ## the image registry defined by "URL".
  ## "enforcement" can assume either "dryrun" or "deny".
  imageRegistry:
    enabled: true
    enforcement: deny
    URL:
      - set-me
      - harbor.example.com
      ## cert-manager-acmesolver resolves the ACME (LetsEncrypt) challenge for provisioning TLS certificates.
      ## It runs in the same namespace as the Ingress, hence, this needs to be added as an exception.
      - quay.io/jetstack/cert-manager-acmesolver

  ## Enable rule that requires pods to be targeted
  ## by at least one network policy.
  networkPolicies:
    enabled: true
    enforcement: deny

  ## Enable rule that requires pods to have resource requests.
  resourceRequests:
    enabled: true
    enforcement: deny

  ## It will not allow any image with the latest tag
  disallowedTags:
    enabled: true
    enforcement: dryrun
    tags:
     - latest

velero:
  storagePrefix: workload-cluster

  ## Excluded namespaces
  excludedNamespaces:
    - cert-manager
    - falco
    - fluentd
    - hnc-system
    - ingress-nginx
    - kube-node-lease
    - kube-public
    - kube-system
    - kured
    - monitoring
    - rook-ceph
    - velero
    - gatekeeper-system

  ## Extra excluded namespace, here we should add the namespaces that are more likely to change
  excludedExtraNamespaces: []

## Hierarchical namespace controller configuration, enable in common-config.yaml
hnc:
  ## Included namespaces, empty string will include all
  includedNamespacesRegex: ""

  ## Excluded namespaces
  excludedNamespaces:
    - alertmanager
    - cert-manager
    - falco
    - fluentd
    - hnc-system
    - ingress-nginx
    - kube-node-lease
    - kube-public
    - kube-system
    - kured
    - monitoring
    - rook-ceph
    - velero
    - gatekeeper-system

  ## Extra excluded namespace, here we should add the namespaces that are more likely to change
  excludedExtraNamespaces: []

  ## Annotations that will be stripped from propagated objects
  unpropagatedAnnotations: []

  ## Annotations that will be propagated to subnamespaces (allows regex)
  managedNamespaceAnnotations: []
  ## Labels that will be propagated to subnamespaces (allows regex)
  ## Labels in particular must also be configured in the HierarchyConfiguration object to be propagated
  managedNamespaceLabels: []

  ## Set to allow users to edit the HierarchyConfiguration in each (sub)namespace
  allowConfigEdit: false

  ## Manager deployment configuration
  manager:
    resources:
      requests:
        cpu: 100m
        memory: 150Mi
      limits:
        cpu: 100m
        memory: 300Mi

    nodeSelector: {}
    tolerations: []
    affinity: {}

  ## Enables HA mode for hnc webhooks
  ha: true

  ## Webhook deployment configuration, only used if hnc.ha is true
  webhook:
    replicaCount: 3
    resources:
      requests:
        cpu: 100m
        memory: 150Mi
      limits:
        cpu: 100m
        memory: 300Mi

    topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/component: hnc-webhook
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule

    nodeSelector: {}
    tolerations: []
    affinity: {}

  ## Service monitor configuration
  serviceMonitor:
    relabelings: []

## certmanager:
  ## when using cert-manager with HTTP01 challenge and a custom image registry the below parameter should be added in the extraArgs
  ## !! this works only with public repositories !! see https://github.com/jetstack/cert-manager/issues/2429
  ## update the image tag based on the version used in the helm chart
  ## - --acme-http01-solver-image=<harbor_server_name>/<proxy_project_name>/jetstack/cert-manager-acmesolver:v1.4.0
  ## extraArgs: []

## Configuration for fluentd.
## Fluentd ships logs to OpenSearch using the endpoint 'opensearch.subdomain' set in common-config.yaml.
## Consists of two different deployments, one for running on master nodes
## and and one for running on "user nodes".
fluentd:
  elasticsearch:
    buffer: {}
  ## Tolerate master nodes.
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      value: ""
    - key: node-role.kubernetes.io/control-plane
      effect: NoSchedule
      value: ""

  ## Only run on master nodes.
  nodeSelector: ""
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: node-role.kubernetes.io/control-plane
                operator: Exists

  resources:
    limits:
      cpu: 500m
      memory: 572Mi
    requests:
      cpu: 100m
      memory: 300Mi

  ## Extra fluentd config to mount.
  extraConfigMaps: {}

  ## User controllable fluentd deployment.
  ## These pods collect logs from nodes where the user can run pods.
  ## Users can specify additional plugins and config in the respective configmaps:
  ## 'fluentd-extra-plugins', and 'fluentd-extra-config'.
  user:

    resources:
      limits:
        cpu: 500m
        memory: 572Mi
      requests:
        cpu: 100m
        memory: 300Mi

    tolerations: []
    affinity: {}
    nodeSelector: {}

externalTrafficPolicy:
  # Whitelisting requires externalTrafficPolicy.local to be true
  # local: true

  # Comma separated list of CIDRs, e.g. 172.16.0.0/24,172.24.0.0/24
  whitelistRange:
    # global: 0.0.0.0/0
    kubeapiMetrics: false

prometheusBlackboxExporter:
  targets:
    gatekeeper: true
    falco: true

# Network policies for workload cluster
networkPolicies:
  additional: {}
# |-
#   kind: NetworkPolicy
#   apiVersion: networking.k8s.io/v1
#   metadata:
#     name: example-np
#     namespace: default
#   spec:
#     policyTypes:
#       - Ingress
#       - Egress
#     podSelector:
#       matchLabels:
#         foo: bar
#     ingress: {}
#     egress: {}
# ---
  global:
    wcApiserver:
      # usualy private ip of control-plane nodes
      ips:
        - set-me
      port: 6443
    wcNodes:
      # ip of all nodes in the cluster for internal communication
      ips:
        - set-me

  monitoring:
    enabled: true

  fluentd:
    enabled: true

  ingressNginx:
    ingressOverride:
      ips:
      - set-me-if-enabled

  certManager:
    namespaces: []
  gatekeeper:
    enabled: true

  alertmanager:
    enabled: true
