# This configuration applies to the workload cluster.
# It will override settings set in "defaults/common-config.yaml".
global:
  ## The cluster name.
  ## Used in logs and metrics as to separate these from other clusters.
  clusterName: ${CK8S_ENVIRONMENT_NAME}-wc

## User configuration.
user:
  ## This only controls if the namespaces should be created, user RBAC is always created.
  createNamespaces: true

  ## List of user namespaces to create.
  namespaces:
    - set-me
    - demo

  ## List of users to create RBAC rules for.
  adminUsers:
    - set-me
    - admin@example.com

  ## List of groups to create RBAC rules for.
  adminGroups:
    - set-me

## Falco configuration.
falco:
  enabled: true
  resources:
    limits:
      cpu: 200m
      memory: 1024Mi
    requests:
      cpu: 100m
      memory: 512Mi

  ## Run on master nodes.
  tolerations:
    - key: node-role.kubernetes.io/master
      effect: NoSchedule
  affinity: {}
  nodeSelector: {}

  ## Falco alerting configuration.
  alerts:
    enabled: true
    ## supported: 'alertmanager', 'slack'.
    type: alertmanager
    priority: notice
    hostPort: http://kube-prometheus-stack-alertmanager.monitoring:9093

  falcoSidekick:
    resources:
      limits:
        cpu: 20m
        memory: 50Mi
      requests:
        cpu: 10m
        memory: 25Mi
    tolerations: []
    affinity: {}
    nodeSelector: {}

  falcoExporter:
    resources:
      requests:
        cpu: 30m
        memory: 20Mi
      limits:
        cpu: 30m
        memory: 20Mi
    tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
    affinity: {}
    nodeSelector: {}

## Prometheus configuration.
## Prometheus collects metrics and pushes it to InfluxDB.
prometheus:
  remoteWrite:
    ## User used when authentication against InfluxDB.
    user: wcWriter

  ## Additional prometheus scrape config.
  ## ref: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config
  additionalScrapeConfigs: []
  ## Predictive alert if the resource usage will hit the set percentage in 3 days
  predictLinear:
    enabled: true
    limit: 66

## Open policy agent configuration
opa:
  enabled: true

  ## Enable rule that requires pods to come from
  ## the image registry defined by "URL".
  ## "enforcement" can assume either "dryrun" or "deny".
  imageRegistry:
    enabled: true
    enforcement: deny
    URL:
      - set-me
      - harbor.example.com
      - quay.io/jetstack/cert-manager-acmesolver

  ## Enable rule that requires pods to be targeted
  ## by at least one network policy.
  networkPolicies:
    enabled: true
    enforcement: deny

  ## Enable rule that requires pods to have resource requests.
  resourceRequests:
    enabled: true
    enforcement: deny

  ## It will not allow any image with the latest tag
  disallowedTags:
    enabled: true
    enforcement: dryrun
    tags:
     - latest

## certmanager:
  ## when using cert-manager with HTTP01 challenge and a custom image registry the below parameter should be added in the extraArgs
  ## !! this works only with public repositories !! see https://github.com/jetstack/cert-manager/issues/2429
  ## update the image tag based on the version used in the helm chart
  ## - --acme-http01-solver-image=<harbor_server_name>/<proxy_project_name>/jetstack/cert-manager-acmesolver:v1.4.0
  ## extraArgs: []

## Configuration for fluentd.
## Fluentd ships logs to OpenSearch using the endpoint 'opensearch.subdomain' set in common-config.yaml.
## Consists of two different deployments, one for running on master nodes
## and and one for running on "user nodes".
fluentd:
  elasticsearch:
    buffer: {}
  ## Tolerate master nodes.
  tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      value: ""

  ## Only run on master nodes.
  nodeSelector:
    node-role.kubernetes.io/master: ""

  resources:
    limits:
      cpu: 500m
      memory: 572Mi
    requests:
      cpu: 200m
      memory: 300Mi

  affinity: {}

  ## Extra fluentd config to mount.
  extraConfigMaps: {}

  ## User controllable fluentd deployment.
  ## These pods collect logs from nodes where the user can run pods.
  ## Users can specify additional plugins and config in the respective configmaps:
  ## 'fluentd-extra-plugins', and 'fluentd-extra-config'.
  user:
    resources:
      limits:
        cpu: 500m
        memory: 572Mi
      requests:
        cpu: 200m
        memory: 300Mi

    tolerations: []
    affinity: {}
    nodeSelector: {}
