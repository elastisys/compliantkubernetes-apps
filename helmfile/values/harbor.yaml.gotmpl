{{- if not (or (eq .Values.harbor.persistence.type "filesystem") (eq .Values.harbor.persistence.type "swift") ) }}
{{- if not (and (eq .Values.harbor.persistence.type "objectStorage") (or (eq .Values.objectStorage.type "s3") (eq .Values.objectStorage.type "gcs") ) ) }}
{{ fail "\nERROR: Harbor persistence type should be set to \"filesystem\" (persistent volume), \"swift\", or \"objectStorage\" (matcing global object storage, see Values.objectStorage.type)" }}
{{- end }}
{{- end }}
expose:
  type: ingress
  tls:
    enabled: true
    certSource: secret
    secret:
      secretName: harbor-core-ingress-cert
      notarySecretName: harbor-notary-ingress-cert
  ingress:
    annotations:
      cert-manager.io/cluster-issuer: {{ .Values.global.issuer }}
      {{ if and .Values.externalTrafficPolicy.local .Values.externalTrafficPolicy.whitelistRange.harbor }}
      nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.externalTrafficPolicy.whitelistRange.harbor }}
      {{ end }}
    hosts:
      core: {{ .Values.harbor.subdomain }}.{{ .Values.global.baseDomain }}
      notary: {{ .Values.harbor.notary.subdomain }}.{{ .Values.global.baseDomain }}

ipFamily:
  # ipv6Enabled set to true if ipv6 is enabled in cluster, currently it affected the nginx related component
  ipv6:
    enabled: false
  # ipv4Enabled set to true if ipv4 is enabled in cluster, currently it affected the nginx related component
  ipv4:
    enabled: true

persistence:
  enabled: true
  resourcePolicy: "keep"
  persistentVolumeClaim:
    chartmuseum:
      size: {{ .Values.harbor.chartmuseum.persistentVolumeClaim.size }}
    registry:
      size: {{ .Values.harbor.registry.persistentVolumeClaim.size }}
    jobservice:
      jobLog:
        size: {{ .Values.harbor.jobservice.jobLog.persistentVolumeClaim.size }}
      scanDataExports:
        size: {{ .Values.harbor.jobservice.scanDataExports.persistentVolumeClaim.size }}
    {{ if eq .Values.harbor.database.type "internal" }}
    database:
      size: {{ .Values.harbor.database.internal.persistentVolumeClaim.size }}
    {{ end }}
    {{- if eq .Values.harbor.redis.type "internal" }}
    redis:
      size: {{ .Values.harbor.redis.internal.persistentVolumeClaim.size }}
    {{- end }}
    trivy:
      size: {{ .Values.harbor.trivy.persistentVolumeClaim.size }}
  imageChartStorage:
    disableredirect: {{ .Values.harbor.persistence.disableRedirect }}
    {{ if eq .Values.harbor.persistence.type "filesystem" }}
    type: filesystem
    filesystem:
      rootdirectory: /storage
    {{ else if eq .Values.harbor.persistence.type "swift" }}
    {{- $swift := .Values.objectStorage | getOrNil "swift" | required "Swift enabled for Harbor but not configured!" }}
    type: swift
    swift:
      authversion: {{ $swift.authVersion }}
      authurl: {{ $swift.authUrl }}
      region: {{ $swift.region }}
      container: {{ .Values.objectStorage.buckets.harbor }}
      {{- if getOrNil "domainId" $swift }}
      domainid: {{ $swift.domainId }}
      {{- else if getOrNil "domainName" $swift }}
      domain: {{ $swift.domainName }}
      {{- end }}
      username: {{ $swift.username | quote }}
      password: {{ $swift.password | quote }}
      tenantid: {{ $swift.projectId }}
      tenant: {{ $swift.projectName }}
    {{ else if eq .Values.harbor.persistence.type "objectStorage" }}
    {{ if eq .Values.objectStorage.type "s3" }}
    type: s3
    s3:
      region: {{ .Values.objectStorage.s3.region }}
      regionendpoint: {{ .Values.objectStorage.s3.regionEndpoint }}
      bucket: {{ .Values.objectStorage.buckets.harbor }}
      secretkey: {{ .Values.objectStorage.s3.secretKey }}
      accesskey: {{ .Values.objectStorage.s3.accessKey }}
      multipartcopythresholdsize: {{ int64 .Values.harbor.s3.multipartcopythresholdsize | quote }}
    {{ else if eq .Values.objectStorage.type "gcs" }}
    type: gcs
    gcs:
      bucket: {{ .Values.objectStorage.buckets.harbor }}
      encodedkey: {{ .Values.objectStorage.gcs.keyfileData | b64enc }}
    {{- end }}
    {{- end }}

externalURL: https://{{ .Values.harbor.subdomain }}.{{ .Values.global.baseDomain }}

harborAdminPassword: {{ .Values.harbor.password }}

clair:
  enabled: false

core:
  replicas: {{ .Values.harbor.core.replicas }}
  secret: {{ .Values.harbor.coreSecret }}
  secretName: harbor-core-cert
  {{ if not (eq (len .Values.harbor.xsrf) 32) }}
  {{ fail "\nERROR: The xsrf key (found at harbor.xsrf) must be exactly 32 characters long" }}
  {{ end }}
  xsrfKey: {{ .Values.harbor.xsrf }}
  resources:    {{- toYaml .Values.harbor.core.resources | nindent 4 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.core.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}

jobservice:
  replicas:     {{ .Values.harbor.core.replicas }}
  secret:       {{ .Values.harbor.jobserviceSecret }}
  resources:    {{- toYaml .Values.harbor.jobservice.resources | nindent 4 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.jobservice.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}
  jobLoggers:   {{- toYaml .Values.harbor.jobservice.jobLoggers | nindent 4 }}

registry:
  replicas: {{ .Values.harbor.registry.replicas }}
  secret:   {{ .Values.harbor.registrySecret }}
  registry:
    resources:  {{- toYaml .Values.harbor.registry.resources | nindent 6 }}
  controller:
    resources:  {{- toYaml .Values.harbor.registry.controller.resources | nindent 6 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.registry.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}
  credentials:
    password: {{ .Values.harbor.registryPassword }}
    htpasswdString: {{ .Values.harbor.registryPasswordHtpasswd }}

notary:
  server:
    replicas:     {{ .Values.harbor.notary.replicas }}
    resources:    {{- toYaml .Values.harbor.notary.resources | nindent 6 }}
    affinity:     {{- toYaml .Values.harbor.notary.affinity | nindent 6 }}
    resources:    {{- toYaml .Values.harbor.notary.resources | nindent 6 }}
    nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 6 }}
    tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 6 }}
  signer:
    replicas:     {{ .Values.harbor.notary.replicas }}
    resources:    {{- toYaml .Values.harbor.notarySigner.resources | nindent 6 }}
    affinity:     {{- toYaml .Values.harbor.notarySigner.affinity | nindent 6 }}
    resources:    {{- toYaml .Values.harbor.notary.resources | nindent 6 }}
    nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 6 }}
    tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 6 }}
  secretName: harbor-notary-cert

database:
  type: {{ .Values.harbor.database.type }}
  {{- if eq .Values.harbor.database.type "internal" }}
  internal:
    password:     {{ .Values.harbor.internal.databasePassword }}
    resources:    {{- toYaml .Values.harbor.database.internal.resources | nindent 6 }}
    nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 6 }}
    affinity:     {{- toYaml .Values.harbor.database.internal.affinity | nindent 6 }}
    tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 6 }}
  {{- else if eq .Values.harbor.database.type "external" }}
  external:
    host:                 {{ .Values.harbor.database.external.host }}
    port:                 {{ .Values.harbor.database.external.port }}
    username:             {{ .Values.harbor.database.external.username }}
    password:             {{ .Values.harbor.external.databasePassword }}
    coreDatabase:         {{ .Values.harbor.database.external.coreDatabase }}
    notaryServerDatabase: {{ .Values.harbor.database.external.notaryServerDatabase }}
    notarySignerDatabase: {{ .Values.harbor.database.external.notarySignerDatabase }}
    sslmode:              {{ .Values.harbor.database.external.sslmode }}
  {{- end }}

trivy:
  replicas:     {{ .Values.harbor.trivy.replicas }}
  resources:    {{- toYaml .Values.harbor.trivy.resources | nindent 4 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.trivy.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}

portal:
  replicas:     {{ .Values.harbor.portal.replicas }}
  resources:    {{- toYaml .Values.harbor.portal.resources | nindent 4 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.portal.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}

chartmuseum:
  replicas:     {{ .Values.harbor.chartmuseum.replicas }}
  resources:    {{- toYaml .Values.harbor.chartmuseum.resources | nindent 4 }}
  nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 4 }}
  affinity:     {{- toYaml .Values.harbor.chartmuseum.affinity | nindent 4 }}
  tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 4 }}
  image:
    tag: v2.4.2

redis:
  type: {{ .Values.harbor.redis.type }}
  {{- if eq .Values.harbor.redis.type "internal" }}
  internal:
    resources:    {{- toYaml .Values.harbor.redis.internal.resources | nindent 6 }}
    nodeSelector: {{- toYaml .Values.harbor.nodeSelector | nindent 6 }}
    affinity:     {{- toYaml .Values.harbor.redis.internal.affinity | nindent 6 }}
    tolerations:  {{- toYaml .Values.harbor.tolerations | nindent 6 }}
  {{- end }}
  {{- if and (eq .Values.harbor.redis.type "external") (.Values.harbor.redis.external) }}
  external:
    {{ toYaml .Values.harbor.redis.external | nindent 4 }}
  {{- end }}
updateStrategy:
  type: Recreate
