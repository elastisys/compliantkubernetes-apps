elastisys_custom:
  influxdb_user: {{ .Values.influxDB.user }}
  influxdb_password: {{ .Values.influxDB.password }}
  s3_credentials: |+
  {{- if eq .Values.objectStorage.type "s3" }}
    [default]
    aws_access_key_id={{ .Values.objectStorage.s3.accessKey }}
    aws_secret_access_key={{ .Values.objectStorage.s3.secretKey }}
    region={{ .Values.objectStorage.s3.region }}
  {{- else if eq .Values.objectStorage.type "gcs" }}
    {{ .Values.objectStorage.gcs.keyfileData | nindent 4 }}
  {{- end }}

  # Deploy exporter for exposing database sizes
  metrics:
    enabled: {{ .Values.influxDB.retention.enabled }}

    # This is actually for retention and not for exporting metrics!
    # TODO: move this to elastisys_custom.retention
    jobs:
      service_cluster:
        data_size_limit: {{ .Values.influxDB.retention.sizeSC }}
      workload_cluster:
        data_size_limit: {{ .Values.influxDB.retention.sizeWC }}

  retention:
    enabled: {{ .Values.influxDB.retention.enabled }}
    resources: {{- toYaml .Values.influxDB.retention.resources | nindent 6 }}

serviceAccount:
  create: false

image:
  tag: "1.8.0-alpine"

persistence:
  size: {{ .Values.influxDB.persistence.size }}

setDefaultUser:
  # NOTE: the Job to create this user is actually disabled, this only creates
  # the secret that we set env vars from below.
  # In fact, it is not possible to create the user through the setDefaultUser
  # Job when http auth is enabled.
  enabled: false

env:
# Set credentials from Secret so that it is not possible to read them directly
# with `kubectl get pod -o yaml`
- name: INFLUXDB_ADMIN_USER
  valueFrom:
    secretKeyRef:
      name: influxdb-auth
      key: INFLUXDB_USER
- name: INFLUXDB_ADMIN_PASSWORD
  valueFrom:
    secretKeyRef:
      name: influxdb-auth
      key: INFLUXDB_PWD

config:
  data:
    index-version: tsi1
  http:
    auth-enabled: true
    log-enabled: false

resources:    {{- toYaml .Values.influxDB.resources | nindent 2 }}
nodeSelector: {{- toYaml .Values.influxDB.nodeSelector | nindent 2 }}
affinity:     {{- toYaml .Values.influxDB.affinity | nindent 2  }}
tolerations:  {{- toYaml .Values.influxDB.tolerations | nindent 2 }}

initScripts:
  enabled: {{ .Values.influxDB.createdb }}
  scripts:
    init.iql: |+
      CREATE DATABASE "service_cluster" WITH DURATION {{ .Values.influxDB.retention.durationSC }} REPLICATION 1 NAME service_cluster_rp;
      CREATE DATABASE "workload_cluster" WITH DURATION {{ .Values.influxDB.retention.durationWC }} REPLICATION 1 NAME workload_cluster_rp;

extraContainers:
  - name: influxdb-node-exporter
    image: prom/node-exporter:v1.0.1
    args: ["--collector.textfile.directory=/textfile-collector", "--no-collector.arp", "--no-collector.bcache", "--no-collector.bonding", "--no-collector.conntrack", "--no-collector.cpu", "--no-collector.cpufreq", "--no-collector.diskstats", "--no-collector.edac", "--no-collector.entropy", "--no-collector.filefd", "--no-collector.filesystem", "--no-collector.hwmon", "--no-collector.infiniband", "--no-collector.ipvs", "--no-collector.loadavg", "--no-collector.mdadm", "--no-collector.meminfo", "--no-collector.netclass", "--no-collector.netdev", "--no-collector.nfs", "--no-collector.nfsd", "--no-collector.netstat", "--no-collector.pressure", "--no-collector.stat", "--no-collector.sockstat", "--no-collector.timex", "--no-collector.vmstat", "--no-collector.xfs", "--no-collector.zfs"]
      # enabled collectors: textfile, time, uname
    ports:
    - containerPort: 9100
      name: web
    volumeMounts:
      - name: textfile-collector-dir
        mountPath: /textfile-collector
  - name: influxdb-cronjob
    image: bambash/docker-cron
    volumeMounts:
      - name: influxdb-data #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
        mountPath: /var/lib/influxdb
      - name: textfile-collector-dir
        mountPath: /textfile-collector
      - name: scripts
        mountPath: /scripts
      - name: cronfiles
        mountPath: /etc/cron.d/
      - name: config-volume
        mountPath: /etc/config

volumes:
  - name: textfile-collector-dir
    emptyDir: {}
  - name: scripts
    configMap:
      name: influxdb-du-monitoring-script #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
  - name: cronfiles
    configMap:
      name: influxdb-du-monitoring-cronjob #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
  - name: config-volume
    configMap:
      name: influxdb-common-env-vars-cm #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
      items:
      - key: influxdb-retention-database
        path: influxdb-retention-database
      - key: prometheus-influxdb-retention-metric-name
        path: prometheus-influxdb-retention-metric-name

backup:
  enabled: {{ .Values.influxDB.backup.enabled }}
  resources: {{- toYaml .Values.influxDB.backup.resources | nindent 4 }}
  persistence:
    enabled: true
    storageClass: {{ .Values.global.storageClass }}
    accessMode: ReadWriteOnce
    size: {{ add .Values.influxDB.retention.sizeWC .Values.influxDB.retention.sizeSC -}}Ki # the sum of influxDB.metrics.sizeWc and influxDB.metrics.sizeWc (all values in KB)
  schedule: {{ .Values.influxDB.backup.schedule | quote }}
  startingDeadlineSeconds: {{ .Values.influxDB.backup.startingDeadlineSeconds }}
  {{- if eq .Values.objectStorage.type "s3" }}
  s3:
    credentialsSecret: influxdb-backup-secret #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
    destination: s3://{{ .Values.objectStorage.buckets.influxDB }}
    endpointUrl: {{ .Values.objectStorage.s3.regionEndpoint }}
  {{- else if eq .Values.objectStorage.type "gcs" }}
  gcs:
    destination: gs://{{ .Values.objectStorage.buckets.influxDB }}
    serviceAccountSecretKey: credentials
    serviceAccountSecret: influxdb-backup-secret
  {{- end }}

backupRetention:
  enabled: {{ .Values.influxDB.backupRetention.enabled }}
  daysToRetain: {{ .Values.influxDB.backupRetention.daysToRetain }}
  resources: {{- toYaml .Values.influxDB.backupRetention.resources | nindent 4 }}
  schedule: {{ .Values.influxDB.backupRetention.schedule | quote}}
  startingDeadlineSeconds: {{ .Values.influxDB.backupRetention.startingDeadlineSeconds }}
  s3:
    credentialsSecret: influxdb-backup-secret #TODO: use influxdb.fullname from _helpers.tpl instead hardcoded "influxdb"
    bucketName: {{ .Values.objectStorage.buckets.influxDB }}
    endpointUrl: {{ .Values.objectStorage.s3.regionEndpoint }}
