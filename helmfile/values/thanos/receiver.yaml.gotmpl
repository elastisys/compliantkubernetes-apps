existingObjstoreSecret: thanos-objectstorage-secret-objstore-secret

query:
  enabled: false

queryFrontend:
  enabled: false

compactor:
  enabled: true

  retentionResolutionRaw: {{ .Values.thanos.compactor.retentionResolutionRaw }}
  retentionResolution5m: {{ .Values.thanos.compactor.retentionResolution5m }}
  retentionResolution1h: {{ .Values.thanos.compactor.retentionResolution1h }}

  {{- if eq .Values.thanos.compactor.deduplication "receiverReplicas" }}
  extraFlags:
    - --deduplication.func=
    - --deduplication.replica-label=replica
  {{- else if eq .Values.thanos.compactor.deduplication "prometheusReplicas" }}
  extraFlags:
    - --deduplication.func=penalty
    - --deduplication.replica-label=replica
    - --deduplication.replica-label=prometheus_replica
  {{- end }}

  resources: {{- toYaml .Values.thanos.compactor.resources | nindent 4 }}

  persistence:
    size: {{ .Values.thanos.compactor.persistence.size }}

storegateway:
  enabled: true
  persistence:
    size: {{ .Values.thanos.storegateway.persistence.size }}
  resources: {{- toYaml .Values.thanos.storegateway.resources | nindent 4 }}

bucketweb:
  enabled: true
  resources: {{- toYaml .Values.thanos.bucketweb.resources | nindent 4 }}

receive:
  enabled: true

  mode: {{ .Values.thanos.receiver.mode }}

  # extraFlags:
  #   - "--receive.tenant-label-name=\"cluster\""

  tsdbRetention: {{ .Values.thanos.receiver.tsdbRetention }}

  persistence:
    enabled: {{ .Values.thanos.receiver.persistence.enabled }}
    size: {{ .Values.thanos.receiver.persistence.size }}

  resources: {{- toYaml .Values.thanos.receiver.resources | nindent 4 }}

  replicaCount: {{ .Values.thanos.receiver.replicaCount }}
  topologySpreadConstraints: {{- toYaml .Values.thanos.receiver.topologySpreadConstraints | nindent 4 }}

  service:
    additionalHeadless: true

  ingress:
    enabled: true
    ingressClassName: nginx
    hostname: {{ .Values.thanos.receiver.subdomain }}.{{ .Values.global.opsDomain }}
    tls: true
    annotations:
      cert-manager.io/cluster-issuer: {{ .Values.global.issuer }}
      nginx.ingress.kubernetes.io/auth-secret: thanos-ingress-secret-basic-auth
      nginx.ingress.kubernetes.io/auth-type: basic
      nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required'
      {{ if and .Values.externalTrafficPolicy.local .Values.externalTrafficPolicy.whitelistRange.thanosReceiver }}
      nginx.ingress.kubernetes.io/whitelist-source-range: {{ .Values.externalTrafficPolicy.whitelistRange.thanosReceiver }}
      {{ end }}

receiveDistributor:
  resources: {{- toYaml .Values.thanos.receiveDistributor.resources | nindent 4 }}
  replicationFactor: {{  .Values.thanos.receiveDistributor.replicationFactor }}

ruler:
  enabled: {{ .Values.thanos.ruler.enabled }}

  resources: {{- toYaml .Values.thanos.ruler.resources | nindent 4 }}

  service:
    additionalHeadless: true

  persistence:
    enabled: {{ .Values.thanos.ruler.persistence.enabled }}
    size: {{ .Values.thanos.ruler.persistence.size }}

  replicaCount: {{ .Values.thanos.ruler.replicaCount }}
  topologySpreadConstraints: {{- toYaml .Values.thanos.ruler.topologySpreadConstraints | nindent 4 }}

  alertmanagers:
    - dnssrv+http://_http-web._tcp.alertmanager-operated.monitoring.svc.cluster.local

  queries:
    - dnssrv+_http._tcp.thanos-query-query-headless.thanos.svc

  clusterName: {{ .Values.global.ck8sEnvironmentName }}

  existingConfigmap: thanos-ruler-thanos-ruler-rulefiles-0

  extraFlags:
    - --rule-file=/conf/rules/*.yaml

  # Taken from what a thanos-ruler would get from the prometheus operator.
  sidecars:
    - name: config-reloader
      image: quay.io/prometheus-operator/prometheus-config-reloader:v0.50.0
      imagePullPolicy: IfNotPresent
      command:
      - /bin/prometheus-config-reloader
      args:
      - --reload-url=http://127.0.0.1:10902/-/reload
      - --watched-dir=/etc/thanos/rules/thanos-ruler-thanos-ruler-rulefiles-0
      env:
      - name: POD_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      resources:
        limits:
          cpu: 100m
          memory: 50Mi
        requests:
          cpu: 100m
          memory: 50Mi
      securityContext:
        runAsNonRoot: true
        runAsGroup: 65534
        runAsUser: 65534
      volumeMounts:
      - mountPath: /etc/thanos/rules/thanos-ruler-thanos-ruler-rulefiles-0
        name: ruler-config

metrics:
  enabled: {{ .Values.thanos.metrics.enabled }}
  serviceMonitor:
    enabled: {{ .Values.thanos.metrics.serviceMonitor.enabled }}
