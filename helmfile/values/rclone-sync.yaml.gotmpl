{{- range .Values.objectStorage.sync.buckets }}
{{- if or (and (ne (get "sourceType" "s3" .) "s3") (ne (get "sourceType" "swift" .) "swift") ) (and (ne $.Values.objectStorage.type "s3") (ne $.Values.objectStorage.type "swift") ) }}
{{- fail "rclone-sync only supports using s3 and swift on source ends" }}
{{- end }}
{{- if or (and (ne (get "destinationType" "s3" .) "s3") (ne (get "destinationType" "swift" .) "swift") ) (and (ne $.Values.objectStorage.sync.type "s3") (ne $.Values.objectStorage.sync.type "swift") ) }}
{{- fail "rclone-sync only supports using s3 and swift on destination ends" }}
{{- end }}
{{- end }}

{{- if not (or .Values.objectStorage.sync.syncDefaultBuckets .Values.objectStorage.sync.buckets) }}
{{- fail "rclone-sync configured without buckets to sync" }}
{{- end }}

config:
{{- if hasKey .Values.objectStorage.sync "dryrun" }}
  dryrun: {{ .Values.objectStorage.sync.dryrun }}
{{- end }}

{{ $sourceS3 := "" }}
{{ $sourceSwift := "" }}
{{ $destinationS3 := "" }}
{{ $destinationSwift := "" }}

{{- range .Values.objectStorage.sync.buckets }}
{{- if or (eq (get "sourceType" "" .) "s3") (and (ne (get "sourceType" "" .) "swift") (eq $.Values.objectStorage.type "s3") ) }}
{{ $sourceS3 = "true" }}
{{- else if or (eq (get "sourceType" "" .) "swift") (and (ne (get "sourceType" "" .) "s3") (eq $.Values.objectStorage.type "swift") ) }}
{{ $sourceSwift = "true" }}
{{- end }}

{{- if or (eq (get "destinationType" "" .) "s3") (and (ne (get "destinationType" "" .) "swift") (eq $.Values.objectStorage.sync.type "s3") ) }}
{{ $destinationS3 = "true" }}
{{- else if or (eq (get "destinationType" "" .) "swift") (and (ne (get "destinationType" "" .) "s3") (eq $.Values.objectStorage.sync.type "swift") ) }}
{{ $destinationSwift = "true" }}
{{- end }}
{{- end }}

  source:
  {{- if $sourceS3 }}
  - name: src-s3
    type: s3
    s3:
      accessKey: {{ .Values.objectStorage.s3.accessKey }}
      secretKey: {{ .Values.objectStorage.s3.secretKey }}
      region: {{ .Values.objectStorage.s3.region }}
      regionEndpoint: {{ .Values.objectStorage.s3.regionEndpoint }}
      forcePathStyle: {{ .Values.objectStorage.s3.forcePathStyle }}
    {{- if hasKey .Values.objectStorage.s3 "v2Auth" }}
      v2Auth: {{ .Values.objectStorage.s3.v2Auth }}
    {{- end }}
  {{- end }}

  {{- if $sourceSwift }}
  - name: src-swift
    type: swift
    swift:
      applicationCredentialID: {{ .Values.objectStorage.swift.applicationCredentialID }}
      applicationCredentialSecret: {{ .Values.objectStorage.swift.applicationCredentialSecret }}
      authUrl: {{ .Values.objectStorage.swift.authUrl }}
      region: {{ .Values.objectStorage.swift.region }}
  {{- end }}

  destination:
  {{- if $destinationS3 }}
  - name: dest-s3
    type: s3
    s3:
      accessKey: {{ .Values.objectStorage.sync.s3.accessKey }}
      secretKey: {{ .Values.objectStorage.sync.s3.secretKey }}
      region: {{ .Values.objectStorage.sync.s3.region }}
      regionEndpoint: {{ .Values.objectStorage.sync.s3.regionEndpoint }}
      forcePathStyle: {{ .Values.objectStorage.sync.s3.forcePathStyle }}
    {{- if hasKey .Values.objectStorage.sync.s3 "v2Auth" }}
      v2Auth: {{ .Values.objectStorage.sync.s3.v2Auth }}
    {{- end }}
  {{- end }}
  {{- if $destinationSwift }}
  - name: dest-swift
    type: swift
    swift:
      applicationCredentialID: {{ .Values.objectStorage.sync.swift.applicationCredentialID }}
      applicationCredentialSecret: {{ .Values.objectStorage.sync.swift.applicationCredentialSecret }}
      authUrl: {{ .Values.objectStorage.sync.swift.authUrl }}
      region: {{ .Values.objectStorage.sync.swift.region }}
  {{- end }}

  encrypt:
  {{- if .Values.objectStorage.sync.encrypt.enabled }}
    enabled: true
    name: encrypt
    password: {{ .Values.objectStorage.sync.encrypt.passwordObscured }}
    salt: {{ .Values.objectStorage.sync.encrypt.saltObscured }}
    directoryNames: {{ .Values.objectStorage.sync.encrypt.directoryNames }}
    fileNames: {{ .Values.objectStorage.sync.encrypt.fileNames }}
  {{- else }}
    enabled: false
  {{- end }}

defaultSchedule: {{ .Values.objectStorage.sync.defaultSchedule }}

buckets:
{{- if .Values.objectStorage.sync.syncDefaultBuckets }}
  {{- range (values .Values.objectStorage.buckets | sortAlpha) }}
  - source: {{ . }}
    destination: {{ . }}
  {{- end }}
{{- end }}
{{- if .Values.objectStorage.sync.buckets }}
  {{- range .Values.objectStorage.sync.buckets }}
  - source: {{ .source }}
    {{- if hasKey . "destination" }}
    destination: {{ .destination }}
    {{- else }}
    destination: {{ .source }}
    {{- end }}
    {{- if hasKey . "schedule" }}
    schedule: {{ .schedule | quote }}
    {{- end }}
    sourceType: {{ . | dig "sourceType" $.Values.objectStorage.type }}
    destinationType: {{ . | dig "destinationType" $.Values.objectStorage.sync.type }}
  {{- end }}
{{- end }}

resources: {{- toYaml .Values.objectStorage.sync.resources | nindent 2 }}
