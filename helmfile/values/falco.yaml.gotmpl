falco:
  json_output: true
  syscall_event_drops:
    # Should be removed when fixed. Probably in 1.0.0 https://github.com/falcosecurity/falco/milestone/3
    actions:
      - ignore
  grpc:
    enabled: true
    bind_address: "unix:///var/run/falco/falco.sock"
    threadiness: 8

  grpc_output:
    enabled: true

{{- if eq .Values.falco.driver.kind "module" }}
containerSecurityContext:
  privileged: true
  allowPrivilegeEscalation: true
{{- end }}

podSecurityContext:
  runAsUser: 0

driver:
  kind: {{ .Values.falco.driver.kind }}
  {{- if eq .Values.falco.driver.kind "ebpf" }}
  ebpf:
    path: {{ .Values.falco.driver.ebpf.path }}
    hostNetwork: {{ .Values.falco.driver.ebpf.hostNetwork }}
    leastPrivileged: true
  {{- else if eq .Values.falco.driver.kind "modern-bpf" }}
  modern_bpf:
    leastPrivileged: true
  {{- end }}
  loader:
    initContainer:
      securityContext:
        runAsUser: 0
        privileged: true
        allowPrivilegeEscalation: true

resources: {{- toYaml .Values.falco.resources | nindent 2  }}
nodeSelector: {{- toYaml .Values.falco.nodeSelector | nindent 2  }}
affinity: {{- toYaml .Values.falco.affinity | nindent 2  }}
tolerations: {{- toYaml .Values.falco.tolerations | nindent 2  }}

falcoctl:
  artifact:
    install:
      enabled: false
    follow:
      enabled: false

customRules:
  {{- if .Values.falco.customRules }}
    {{ toYaml .Values.falco.customRules | nindent 2}}
  {{- end }}
  ssh-trafic.yaml: |-
    - rule: Inbound SSH Connection
      desc: Detect Inbound SSH Connection
      condition: >
        ((evt.type in (accept,listen) and evt.dir=<) or
          (evt.type in (recvfrom,recvmsg))) and ssh_port
      output: >
        Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
      priority: WARNING
      tags: [network]
    - rule: Outbound SSH Connection
      desc: Detect Outbound SSH Connection
      condition: >
        ((evt.type = connect and evt.dir=<) or
          (evt.type in (sendto,sendmsg))) and ssh_port
      output: >
        Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
      priority: WARNING
      tags: [network]
  overwrites.yaml: |-
    - macro: k8s_containers
      condition: (
          container.image.repository in (
            docker.io/bitnami/fluentd,
            docker.io/bitnami/kubectl,
            docker.io/elastisys/calico-accountant,
            docker.io/elastisys/curl-jq,
            docker.io/library/rabbitmq,
            docker.io/openpolicyagent/gatekeeper,
            docker.io/openpolicyagent/gatekeeper-crds,
            docker.io/rabbitmqoperator/cluster-operator,
            docker.io/velero/velero,
            gcr.io/k8s-staging-multitenancy/hnc-manager,
            ghcr.io/aquasecurity/trivy-operator,
            ghcr.io/dexidp/dex,
            ghcr.io/elastisys/fluentd,
            ghcr.io/kubereboot/kured,
            quay.io/jetstack/cert-manager-cainjector,
            quay.io/jetstack/cert-manager-controller,
            quay.io/jetstack/cert-manager-webhook,
            quay.io/kiwigrid/k8s-sidecar,
            quay.io/prometheus-operator/prometheus-operator,
            quay.io/prometheus/prometheus,
            quay.io/spotahome/redis-operator,
            registry.k8s.io/ingress-nginx/kube-webhook-certgen,
            registry.k8s.io/kube-state-metrics/kube-state-metrics,
            registry.opensource.zalan.do/acid/postgres-operator
          ) or (
            k8s.ns.name = "kube-system"
          ) or (
            k8s.ns.name = 'ingress-nginx' and
            k8s.pod.name startswith 'ingress-nginx-controller-' and
            proc.cmdline startswith 'nginx-ingress-c'
          ) or (
            k8s.ns.name = 'velero' and
            k8s.pod.name startswith 'node-agent-' and
            proc.cmdline = 'velero node-agent server'
          )
        )
    - macro: user_expected_system_procs_network_activity_conditions
      condition: (
          (
            container.image.repository = ghcr.io/elastisys/compliantkubernetes-apps-log-manager
          ) or (
            container.image.repository = quay.io/calico/cni and proc.cmdline = 'install'
          )
        )
    - macro: user_known_create_files_below_dev_activities
      condition: (
          (
            container.image.repository = registry.k8s.io/sig-storage/csi-attacher and
            proc.cmdline startswith csi-attacher
          ) or (
            container.image.repository = registry.k8s.io/sig-storage/csi-provisioner and
            proc.cmdline startswith csi-provisioner
          ) or (
            container.image.repository = registry.k8s.io/sig-storage/csi-resizer and
            proc.cmdline startswith csi-resizer
          ) or (
            container.image.repository = registry.k8s.io/sig-storage/csi-snapshotter and
            proc.cmdline startswith csi-snapshotter
          )
        )
    - macro: user_known_k8s_client_container_parens
      condition: (
          container.image.repository in (
            docker.io/bitnami/kubectl,
            docker.io/openpolicyagent/gatekeeper-crds
          )
        )
    - macro: user_known_modify_bin_dir_activities
      condition: (
          container.image.repository = registry.k8s.io/dns/k8s-dns-node-cache and
          proc.pcmdline = 'iptables /usr/sbin/iptables --version' and
          proc.cmdline startswith 'rm -f /usr/sbin/ip'
        )
    - macro: user_known_mount_in_privileged_containers
      condition: (
          container.image.repository in (
            docker.io/k8scloudprovider/cinder-csi-plugin
          ) or (
            container.image.repository=quay.io/cephcsi/cephcsi and proc.cmdline startswith 'mount -t ext4 -o bind,_netdev'
          )
        )
    - macro: user_privileged_containers
      condition: (
          (container.image.repository = docker.io/rook/ceph and proc.cmdline = 'tini -- /usr/local/bin/rook copy-binaries --copy-to-dir /rook') or
          (container.image.repository = docker.io/ceph/ceph and proc.cmdline startswith container) or
          (container.image.repository = quay.io/cephcsi/cephcsi and proc.cmdline startswith container) or
          (container.image.repository = quay.io/cephcsi/cephcsi and proc.cmdline startswith cephcsi) or
          (container.image.repository = quay.io/ceph/ceph and proc.cmdline startswith container) or
          (container.image.repository = quay.io/ceph/ceph and proc.cmdline startswith 'rook cmd-reporter') or
          (container.image.repository = k8s.gcr.io/sig-storage/csi-provisioner and proc.cmdline startswith container) or
          (container.image.repository = registry.k8s.io/sig-storage/csi-snapshotter and proc.cmdline startswith 'csi-snapshotter --csi-address=unix:///csi/csi-provisioner.sock')
        )
    - macro: user_known_contact_k8s_api_server_activities
      condition: (
          (container.image.repository = docker.io/ceph/ceph and proc.cmdline = 'rook ceph osd provision') or
          (container.image.repository = quay.io/ceph/ceph and proc.cmdline = 'rook ceph osd provision') or
          (container.image.repository = docker.io/rook/ceph and proc.cmdline = 'rook ceph operator') or
          (container.image.repository = docker.io/ceph/ceph and proc.cmdline startswith 'rook cmd-reporter') or
          (container.image.repository = quay.io/ceph/ceph and proc.cmdline startswith 'rook cmd-reporter') or
          (container.image.repository = k8s.gcr.io/sig-storage/csi-attacher and proc.cmdline startswith 'csi-attacher') or
          (container.image.repository = k8s.gcr.io/sig-storage/csi-provisioner and proc.cmdline startswith 'csi-provisioner')
        )
    - macro: user_known_package_manager_in_container
      condition: (
          container.image.repository in (
            docker.io/elastisys/curl-jq,
            ghcr.io/elastisys/fluentd,
            registry.k8s.io/dns/k8s-dns-node-cache
          ) or (
            container.image.repository = registry.k8s.io/kube-proxy and
            proc.cmdline startswith update-alternat
          )
        )
    - macro: user_known_stand_streams_redirect_activities
      condition: (
          (container.image.repository = quay.io/calico/node and proc.name = calico-node) or
          (container.image.repository = registry.k8s.io/dns/k8s-dns-node-cache and proc.name = node-cache)
        )
    - macro: user_known_write_below_etc_activities
      condition: (
          (container.image.repository = docker.io/goharbor/harbor-core and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/harbor-exporter and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/harbor-jobservice and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/harbor-registryctl and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/chartmuseum-photon and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/registry-photon and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/trivy-adapter-photon and proc.name = cp) or
          (container.image.repository = quay.io/calico/node and proc.name = cp) or
          (container.image.repository = quay.io/kiwigrid/k8s-sidecar and proc.cmdline = 'python -u /app/sidecar.py') or
          (container.image.repository = quay.io/prometheus-operator/prometheus-config-reloader and proc.name = prometheus-conf) or
          (container.image.repository = registry.k8s.io/dns/k8s-dns-node-cache and proc.name = node-cache) or
          (container.image.repository = quay.io/ceph/ceph and proc.cmdline = 'rook ceph osd provision') or
          (container.image.repository = docker.io/ceph/ceph and proc.cmdline = 'rook ceph osd provision') or
          (container.image.repository = docker.io/rook/ceph and proc.cmdline = 'toolbox.sh -e /usr/local/bin/toolbox.sh') or
          (container.image.repository = docker.io/ceph/ceph and proc.cmdline = 'tini -- /rook/rook ceph osd provision') or
          (container.image.repository = quay.io/cephcsi/cephcsi and proc.cmdline startswith cephcsi)
        )
    - macro: user_sensitive_mount_containers
      condition: (
          container.image.repository in (
            ghcr.io/aquasecurity/node-collector,
            quay.io/prometheus/node-exporter
          )
        )
    - macro: user_trusted_containers
      condition: (
          container.image.repository in (
            docker.io/elastisys/calico-accountant,
            docker.io/k8scloudprovider/cinder-csi-plugin,
            docker.io/opensearchproject/opensearch,
            docker.io/velero/velero,
            ghcr.io/kubereboot/kured,
            quay.io/calico/cni,
            quay.io/calico/pod2daemon-flexvol,
            registry.k8s.io/dns/k8s-dns-node-cache,
            registry.k8s.io/kube-proxy
          ) or (
            container.image.repository=docker.io/elastisys/curl-jq and k8s.pod.name startswith opensearch-
          )
        )
    - macro: allowed_clear_log_files
      condition: (
          fd.name startswith "/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/" and proc.cmdline = containerd
        )
    - macro: user_known_shell_config_modifiers
      condition: (
          fd.name startswith "/var/lib/containerd/io.containerd.snapshotter.v1.overlayfs/" and proc.cmdline = containerd
        )
    - list: known_binaries_to_read_environment_variables_from_proc_files
      items: [systemd-run, rook, udevadm]

falcosidekick:
  enabled: {{ .Values.falco.alerts.enabled }}
  config:
    debug: false
    {{ if eq .Values.falco.alerts.type "slack" }}
    slack:
      webhookurl: {{ .Values.falco.alerts.slackWebhook }}
      outputformat: "all"
      footer: ""
      icon: ""
      minimumpriority: {{ .Values.falco.alerts.priority }}
      messageformat: "Falco Alert : rule *{{`{{ .Rule }}`}}*"
    {{ end }}
    {{ if and (eq .Values.falco.alerts.type "alertmanager") .Values.user.alertmanager.enabled }}
    alertmanager:
      hostport: {{ .Values.falco.alerts.hostPort }}
      minimumpriority: {{ .Values.falco.alerts.priority }}
    {{ end }}

  resources:    {{- toYaml .Values.falco.falcoSidekick.resources | nindent 4  }}
  nodeSelector: {{- toYaml .Values.falco.falcoSidekick.nodeSelector | nindent 4  }}
  affinity:     {{- toYaml .Values.falco.falcoSidekick.affinity | nindent 4  }}
  tolerations:  {{- toYaml .Values.falco.falcoSidekick.tolerations | nindent 4  }}
