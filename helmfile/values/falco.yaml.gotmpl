falco:
  json_output: true
  syscall_event_drops:
    # Should be removed when fixed. Probably in 1.0.0 https://github.com/falcosecurity/falco/milestone/3
    actions:
      - ignore
  grpc:
    enabled: true
    bind_address: "unix:///var/run/falco/falco.sock"
    threadiness: 8

  grpc_output:
    enabled: true

resources: {{- toYaml .Values.falco.resources | nindent 2  }}
nodeSelector: {{- toYaml .Values.falco.nodeSelector | nindent 2  }}
affinity: {{- toYaml .Values.falco.affinity | nindent 2  }}
tolerations: {{- toYaml .Values.falco.tolerations | nindent 2  }}

customRules:
  {{- if .Values.falco.customRules }}
    {{ toYaml .Values.falco.customRules | nindent 2}}
  {{- end }}
  ssh-trafic.yaml: |-
    - rule: Inbound SSH Connection
      desc: Detect Inbound SSH Connection
      condition: >
        ((evt.type in (accept,listen) and evt.dir=<) or
          (evt.type in (recvfrom,recvmsg))) and ssh_port
      output: >
        Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
      priority: WARNING
      tags: [network]
    - rule: Outbound SSH Connection
      desc: Detect Outbound SSH Connection
      condition: >
        ((evt.type = connect and evt.dir=<) or
          (evt.type in (sendto,sendmsg))) and ssh_port
      output: >
        Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
      priority: WARNING
      tags: [network]
  overwrites.yaml: |-
    - macro: k8s_containers
      condition: (
          container.image.repository in (
            docker.io/aquasec/starboard-operator,
            docker.io/bitnami/fluentd,
            docker.io/elastisys/calico-accountant,
            docker.io/elastisys/curl-jq,
            docker.io/elastisys/fluentd,
            docker.io/openpolicyagent/gatekeeper,
            docker.io/velero/velero,
            docker.io/weaveworks/kured,
            ghcr.io/dexidp/dex,
            gcr.io/k8s-staging-multitenancy/hnc-manager,
            k8s.gcr.io/kube-state-metrics/kube-state-metrics,
            quay.io/jetstack/cert-manager-cainjector,
            quay.io/jetstack/cert-manager-controller,
            quay.io/jetstack/cert-manager-webhook,
            quay.io/kiwigrid/k8s-sidecar,
            quay.io/prometheus-operator/prometheus-operator,
            quay.io/prometheus/prometheus,
            quay.io/spotahome/redis-operator,
            rabbitmqoperator/cluster-operator,
            registry.opensource.zalan.do/acid/postgres-operator
          ) or (k8s.ns.name = "kube-system")
        )
    - macro: user_known_mount_in_privileged_containers
      condition: (
          container.image.repository in (
            docker.io/k8scloudprovider/cinder-csi-plugin
          )
        )
    - macro: user_known_package_manager_in_container
      condition: (
          container.image.repository in (
            docker.io/elastisys/curl-jq,
            docker.io/elastisys/fluentd,
            registry.k8s.io/dns/k8s-dns-node-cache
          )
        )
    - macro: user_known_write_below_etc_activities
      condition: (
          (container.image.repository = docker.io/goharbor/harbor-core and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/harbor-registryctl and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/registry-photon and proc.name = cp) or
          (container.image.repository = docker.io/goharbor/trivy-adapter-photon and proc.name = cp) or
          (container.image.repository = quay.io/calico/node and proc.name = cp) or
          (container.image.repository = registry.k8s.io/dns/k8s-dns-node-cache and proc.name = node-cache)
        )
    - macro: user_sensitive_mount_containers
      condition: (
          container.image.repository in (
            quay.io/prometheus/node-exporter
          )
        )
    - macro: user_trusted_containers
      condition: (
          container.image.repository in (
            docker.io/elastisys/calico-accountant,
            docker.io/k8scloudprovider/cinder-csi-plugin,
            docker.io/weaveworks/kured,
            quay.io/calico/cni,
            quay.io/calico/pod2daemon-flexvol,
            registry.k8s.io/dns/k8s-dns-node-cache,
            registry.k8s.io/kube-proxy
          ) or (
            container.image.repository=docker.io/elastisys/curl-jq and k8s.pod.name startswith opensearch-
          )
        )

falcosidekick:
  enabled: {{ .Values.falco.alerts.enabled }}
  podSecurityPolicy:
    create: false
  config:
    debug: false
    {{ if eq .Values.falco.alerts.type "slack" }}
    slack:
      webhookurl: {{ .Values.falco.alerts.slackWebhook }}
      outputformat: "all"
      footer: ""
      icon: ""
      minimumpriority: {{ .Values.falco.alerts.priority }}
      messageformat: "Falco Alert : rule *{{`{{ .Rule }}`}}*"
    {{ end }}
    {{ if and (eq .Values.falco.alerts.type "alertmanager") .Values.user.alertmanager.enabled }}
    alertmanager:
      hostport: {{ .Values.falco.alerts.hostPort }}
      minimumpriority: {{ .Values.falco.alerts.priority }}
    {{ end }}

  resources:    {{- toYaml .Values.falco.falcoSidekick.resources | nindent 4  }}
  nodeSelector: {{- toYaml .Values.falco.falcoSidekick.nodeSelector | nindent 4  }}
  affinity:     {{- toYaml .Values.falco.falcoSidekick.affinity | nindent 4  }}
  tolerations:  {{- toYaml .Values.falco.falcoSidekick.tolerations | nindent 4  }}
