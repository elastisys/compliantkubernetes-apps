falco:
  jsonOutput: true
  syscallEventDrops:
    # Should be removed when fixed. Probably in 1.0.0 https://github.com/falcosecurity/falco/milestone/3
    actions:
      - ignore
  grpc:
    enabled: true
    unixSocketPath: "unix:///var/run/falco/falco.sock"
    threadiness: 8

  grpcOutput:
    enabled: true


resources: {{- toYaml .Values.falco.resources | nindent 2  }}
nodeSelector: {{- toYaml .Values.falco.nodeSelector | nindent 2  }}
affinity: {{- toYaml .Values.falco.affinity | nindent 2  }}
tolerations: {{- toYaml .Values.falco.tolerations | nindent 2  }}

podSecurityPolicy:
  create: true

customRules:
  {{- if .Values.falco.customRules }}
    {{ toYaml .Values.falco.customRules | nindent 2}}
  {{- end }}
  ssh-trafic.yaml: |-
    - rule: Inbound SSH Connection
      desc: Detect Inbound SSH Connection
      condition: >
        ((evt.type in (accept,listen) and evt.dir=<) or
          (evt.type in (recvfrom,recvmsg))) and ssh_port
      output: >
        Inbound SSH connection (user=%user.name client_ip=%fd.cip client_port=%fd.cport server_ip=%fd.sip)
      priority: WARNING
      tags: [network]
    - rule: Outbound SSH Connection
      desc: Detect Outbound SSH Connection
      condition: >
        ((evt.type = connect and evt.dir=<) or
          (evt.type in (sendto,sendmsg))) and ssh_port
      output: >
        Outbound SSH connection (user=%user.name server_ip=%fd.sip server_port=%fd.sport client_ip=%fd.cip)
      priority: WARNING
      tags: [network]
  overwrites.yaml: |-
    - macro: k8s_containers
      condition: >
        (container.image.repository in (gcr.io/google_containers/hyperkube-amd64,
        gcr.io/google_containers/kube2sky, sysdig/agent, sysdig/falco,
        sysdig/sysdig, falcosecurity/falco, quay.io/fluentd_elasticsearch/fluentd,
        velero/velero, quay.io/jetstack/cert-manager-cainjector, weaveworks/kured,
        ingress-controller/controller, quay.io/prometheus-operator/prometheus-operator,
        k8s.gcr.io/ingress-nginx/kube-webhook-certgen, quay.io/spotahome/redis-operator,
        registry.opensource.zalan.do/acid/postgres-operator, registry.opensource.zalan.do/acid/postgres-operator-ui,
        rabbitmqoperator/cluster-operator) or (k8s.ns.name = "kube-system"))
    - list: falco_privileged_images
      items: [
        docker.io/sysdig/agent, docker.io/sysdig/falco, docker.io/sysdig/sysdig,
        gcr.io/google_containers/kube-proxy, docker.io/calico/node, quay.io/calico/node,
        docker.io/rook/toolbox, docker.io/cloudnativelabs/kube-router, docker.io/mesosphere/mesos-slave,
        docker.io/docker/ucp-agent, sematext_images, k8s.gcr.io/kube-proxy, calico/node,falcosecurity/falco, k8s.gcr.io/k8s-dns-node-cache
    ]
    - macro: postgres_running_wal_e
      condition: (proc.pname=postgres and proc.cmdline startswith "sh -c envdir \"/run/etc/wal-e.d/env\" wal-g wal-push")
    - macro: user_known_contact_k8s_api_server_activities
      condition: >
        (container.image.repository in (elastisys/curl-jq))
    - list: falco_sensitive_mount_images
      items: [
        docker.io/sysdig/agent, docker.io/sysdig/falco, docker.io/sysdig/sysdig,falcosecurity/falco,
        gcr.io/google_containers/hyperkube,
        gcr.io/google_containers/kube-proxy, docker.io/calico/node,
        docker.io/rook/toolbox, docker.io/cloudnativelabs/kube-router, docker.io/consul,
        docker.io/datadog/docker-dd-agent, docker.io/datadog/agent, docker.io/docker/ucp-agent, docker.io/gliderlabs/logspout,
        docker.io/netdata/netdata, docker.io/google/cadvisor, docker.io/prom/node-exporter,
        amazon/amazon-ecs-agent, quay.io/prometheus/node-exporter
        ]

falcosidekick:
  enabled: {{ .Values.falco.alerts.enabled }}
  podSecurityPolicy:
    create: true
  config:
    debug: false
    {{ if eq .Values.falco.alerts.type "slack" }}
    slack:
      webhookurl: {{ .Values.falco.alerts.slackWebhook }}
      outputformat: "all"
      footer: ""
      icon: ""
      minimumpriority: {{ .Values.falco.alerts.priority }}
      messageformat: "Falco Alert : rule *{{`{{ .Rule }}`}}*"
    {{ end }}
    {{ if and (eq .Values.falco.alerts.type "alertmanager") .Values.user.alertmanager.enabled }}
    alertmanager:
      hostport: {{ .Values.falco.alerts.hostPort }}
      minimumpriority: {{ .Values.falco.alerts.priority }}
    {{ end }}

  resources:    {{- toYaml .Values.falco.falcoSidekick.resources | nindent 4  }}
  nodeSelector: {{- toYaml .Values.falco.falcoSidekick.nodeSelector | nindent 4  }}
  affinity:     {{- toYaml .Values.falco.falcoSidekick.affinity | nindent 4  }}
  tolerations:  {{- toYaml .Values.falco.falcoSidekick.tolerations | nindent 4  }}
