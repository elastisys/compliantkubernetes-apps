#!/usr/bin/env bash

# This is the main entrypoint to Welkin.

set -e -o pipefail

here="$(dirname "$(readlink -f "$0")")"
# shellcheck source=bin/common.bash
source "${here}/common.bash"

usage() {
  echo "COMMANDS:" 1>&2
  echo "  apply <wc|sc> [--sync] [--concurrency=<num>]    deploy the apps" 1>&2
  echo "  clean <wc|sc>                                   Cleans the cluster of apps" 1>&2
  echo "  completion <bash|fish>                          output shell completion code for bash/fish" 1>&2
  echo "  diagnostics <wc|sc> [--help]                    Runs diagnostics of apps" 1>&2
  echo "  dry-run <wc|sc> [--kubectl]                     runs helmfile diff" 1>&2
  echo "  explain <config|secrets> [key.to.parameter]     explains the config or secrets" 1>&2
  echo "  fix-psp-violations <wc|sc>                      Checks and restarts pods that violates Pod Security Polices, applicable for new environments" 1>&2
  echo "  flavors                                         lists supported configuration flavors" 1>&2
  echo "  init <wc|sc|both> [--generate-new-secrets]      initialize the config path" 1>&2
  echo "  install-requirements [--user] [--no-pass]       installs or updates required tools to run compliantkubernetes-apps" 1>&2
  echo "  k8s-installers                                  lists supported kubernetes installers" 1>&2
  echo "  kubeconfig <user|dev|admin>                     generate user kubeconfig, stored at CK8S_CONFIG_PATH/user" 1>&2
  echo "  ops helm <wc|sc>                                run helm as cluster admin" 1>&2
  echo "  ops helmfile <wc|sc>                            run helmfile as cluster admin" 1>&2
  echo "  ops kubecolor <wc|sc>                           run kubecolor as cluster admin" 1>&2
  echo "  ops kubectl <wc|sc>                             run kubectl as cluster admin" 1>&2
  echo "  ops velero <wc|sc>                              run velero as cluster admin" 1>&2
  echo "  providers                                       lists supported cloud providers" 1>&2
  echo "  sbom                                            TODO:" 1>&2
  echo "  s3cmd [cmd]                                     run s3cmd" 1>&2
  echo "  team add-pgp <fp>                               add a new PGP key to secrets" 1>&2
  echo "  team remove-pgp <fp>                            remove a PGP key from secrets and rotate the data encryption key" 1>&2
  echo "  test <wc|sc> [--logging-enabled]                test the applications" 1>&2
  echo "  update-ips <wc|sc|both> <apply|dry-run>         Automatically fetches and applies the IPs for network policies" 1>&2
  echo "  upgrade <wc|sc|both> <vX.Y> apply               runs all apply steps upgrading the environment" 1>&2
  echo "  upgrade <wc|sc|both> <vX.Y> prepare             runs all prepare steps upgrading the configuration" 1>&2
  echo "  upgrade <wc|sc|both> unlock                     reset an upgrade to allow trying again" 1>&2
  echo "  validate <wc|sc>                                validates config files" 1>&2
  echo "  check-requirements                              check the locally installed tool versions" 1>&2
  echo "  version <all|both|config|sc|wc>                 shows apps version" 1>&2
  exit 1
}

SYNC=""
KUBECTL=""
GEN_NEW_SECRETS=""
CONCURRENCY="--concurrency=8"
CK8S_IPV6_ENABLED="false"

for arg in "${@}"; do
  case "${arg}" in
  "--sync") SYNC="sync" ;;
  "--kubectl") KUBECTL="kubectl" ;;
  "--generate-new-secrets") GEN_NEW_SECRETS="--generate-new-secrets" ;;
  "--concurrency="*) CONCURRENCY="${arg}" ;;
  "--ipv6") CK8S_IPV6_ENABLED="true" ;;
  esac
done

case "${1}" in
check-requirements)
  check_tools --just-check
  ;;
init)
  [[ "${2}" =~ ^(wc|sc|both)$ ]] || usage
  check_tools
  export CK8S_CLUSTER="${2}"
  "${here}/init.bash" "${GEN_NEW_SECRETS}"
  ;;
apply)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  check_tools
  "${here}/apply.bash" "${2}" "${SYNC}" "${CONCURRENCY}"
  ;;
test)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  check_tools
  with_kubeconfig "${config["kube_config_${2}"]}" "${here}/test.bash" "${@:2}"
  ;;
dry-run)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  check_tools
  "${here}/dry-run.bash" "${2}" "${KUBECTL}"
  ;;
upgrade)
  [[ "${2}" =~ ^(wc|sc|both)$ ]] || usage
  [[ "${3}" =~ ^(v[0-9]+\.[0-9]+|unlock)$ ]] || usage
  if [[ "${3}" != "unlock" ]]; then
    [[ "${4}" =~ ^(prepare|apply)$ ]] || usage
  fi
  check_tools
  export CK8S_CLUSTER="${2}"
  "${here}/upgrade.bash" "${3}" "${4:-}"
  ;;
team)
  case "${2}" in
  add-pgp | remove-pgp)
    [ -n "${3}" ] || usage
    "${here}/team.bash" "${2}" "${3}"
    ;;
  *) usage ;;
  esac
  ;;
ops)
  case "${2}" in
  kubectl | kubecolor | helm | helmfile | velero)
    [[ "${3}" =~ ^(wc|sc)$ ]] || usage
    command="${2}"
    cluster="${3}"
    shift 3
    "${here}/ops.bash" "${command}" "${cluster}" "${@}"
    ;;
  *) usage ;;
  esac
  ;;
sbom)
  case "${2}" in
  add | generate | get | get-charts | get-containers | get-unset | remove | update | validate)
    check_tools
    command="${2}"
    shift 2
    "${here}/sbom.bash" "${command}" "${@}"
    ;;
  *) "${here}/sbom.bash" usage ;;
  esac
  ;;
s3cmd)
  shift
  sops_exec_file "${secrets[s3cfg_file]}" 's3cmd --config="{}" '"${*}"
  ;;
kubeconfig)
  shift
  "${here}/kubeconfig.bash" "${@}"
  ;;
completion)
  [ -f "${here}/../completion/${2}" ] || usage
  cat "${here}/../completion/${2}"
  ;;
install-requirements)
  shift
  "${here}/install-requirements.bash" "${@}"
  ;;
validate)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  check_tools
  config_load "$2" -v
  echo "Config validation successful"
  ;;
providers) echo "${ck8s_cloud_providers[@]}" ;;
flavors) echo "${ck8s_flavors[@]}" ;;
k8s-installers) echo "${ck8s_k8s_installers[@]}" ;;
explain)
  [[ "${2}" =~ ^(config|secrets)$ ]] || usage
  shift
  "${here}/explain.bash" "${@}"
  ;;
update-ips)
  [[ "${2}" =~ ^(wc|sc|both)$ ]] || usage
  [[ "${3}" =~ ^(apply|dry-run)$ ]] || usage
  "${here}/update-ips.bash" "${2}" "${3}" "${CK8S_IPV6_ENABLED}"
  ;;
fix-psp-violations)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  check_tools
  export CK8S_CLUSTER="${2}"
  "${here}/fix-psp-violations.bash"
  ;;
clean)
  "${here}/clean.bash" "${2}"
  ;;
diagnostics)
  [[ "${2}" =~ ^(wc|sc)$ ]] || usage
  shift
  "${here}/diagnostics.bash" "${@}"
  ;;
version) # all|both|sc|wc
  shift
  [[ "${1}" =~ ^(all|both|config|wc|sc)$ ]] || usage
  if [[ "${1}" =~ ^(all|config)$ ]]; then
    log_info "config version:" "$(yq '.global.ck8sVersion' "${CK8S_CONFIG_PATH}/defaults/common-config.yaml")"
  fi
  if [[ "${1}" =~ ^(all|both|sc)$ ]]; then
    log_info "sc version:" "$(get_apps_version "sc")"
  fi
  if [[ "${1}" =~ ^(all|both|wc)$ ]]; then
    log_info "wc version:" "$(get_apps_version "wc")"
  fi
  ;;
*) usage ;;
esac
